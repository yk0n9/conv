/* automatically generated by rust-bindgen 0.70.1 */
#![allow(warnings)]

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __MINGW64_VERSION_MAJOR: u32 = 12;
pub const __MINGW64_VERSION_MINOR: u32 = 0;
pub const __MINGW64_VERSION_BUGFIX: u32 = 0;
pub const __MINGW64_VERSION_RC: u32 = 0;
pub const __MINGW64_VERSION_STATE: &[u8; 6] = b"alpha\0";
pub const __MINGW32_MAJOR_VERSION: u32 = 3;
pub const __MINGW32_MINOR_VERSION: u32 = 11;
pub const __: u32 = 1;
pub const __MINGW_USE_UNDERSCORE_PREFIX: u32 = 0;
pub const __MINGW_HAVE_ANSI_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_ANSI_C99_SCANF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_SCANF: u32 = 1;
pub const __MINGW_GCC_VERSION: u32 = 0;
pub const __MINGW_SEC_WARN_STR : & [u8 ; 92] = b"This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation\0" ;
pub const __MINGW_MSVC2005_DEPREC_STR : & [u8 ; 117] = b"This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation\0" ;
pub const __MINGW_FORTIFY_LEVEL: u32 = 0;
pub const __MINGW_FORTIFY_VA_ARG: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const USE___UUIDOF: u32 = 1;
pub const __CRT__NO_INLINE: u32 = 1;
pub const __MSVCRT_VERSION__: u32 = 3584;
pub const _WIN32_WINNT: u32 = 2560;
pub const MINGW_HAS_SECURE_API: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const MINGW_HAS_DDK_H: u32 = 1;
pub const _CRT_PACKING: u32 = 8;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 253;
pub const _ARGMAX: u32 = 100;
pub const __USE_MINGW_ANSI_STDIO: u32 = 0;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS: u32 = 4;
pub const _CRT_INTERNAL_LOCAL_SCANF_OPTIONS: u32 = 2;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 20;
pub const EOF: i32 = -1;
pub const _P_tmpdir: &[u8; 2] = b"\\\0";
pub const _wP_tmpdir: &[u8; 2] = b"\\\0";
pub const L_tmpnam: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const P_tmpdir: &[u8; 2] = b"\\\0";
pub const SYS_OPEN: u32 = 20;
pub const _P_WAIT: u32 = 0;
pub const _P_NOWAIT: u32 = 1;
pub const _OLD_P_OVERLAY: u32 = 2;
pub const _P_NOWAITO: u32 = 3;
pub const _P_DETACH: u32 = 4;
pub const _P_OVERLAY: u32 = 2;
pub const _WAIT_CHILD: u32 = 0;
pub const _WAIT_GRANDCHILD: u32 = 1;
pub const L_tmpnam_s: u32 = 260;
pub const TMP_MAX_S: u32 = 2147483647;
pub const GGML_FILE_MAGIC: u32 = 1734831468;
pub const GGML_FILE_VERSION: u32 = 2;
pub const GGML_QNT_VERSION: u32 = 2;
pub const GGML_QNT_VERSION_FACTOR: u32 = 1000;
pub const GGML_MAX_DIMS: u32 = 4;
pub const GGML_MAX_PARAMS: u32 = 2048;
pub const GGML_MAX_CONTEXTS: u32 = 64;
pub const GGML_MAX_SRC: u32 = 10;
pub const GGML_MAX_N_THREADS: u32 = 512;
pub const GGML_MAX_OP_PARAMS: u32 = 64;
pub const GGML_MAX_NAME: u32 = 64;
pub const GGML_DEFAULT_N_THREADS: u32 = 4;
pub const GGML_DEFAULT_GRAPH_SIZE: u32 = 2048;
pub const GGML_MEM_ALIGN: u32 = 16;
pub const GGML_EXIT_SUCCESS: u32 = 0;
pub const GGML_EXIT_ABORTED: u32 = 1;
pub const GGML_ROPE_TYPE_NEOX: u32 = 2;
pub const GGUF_MAGIC: &[u8; 5] = b"GGUF\0";
pub const GGUF_VERSION: u32 = 3;
pub const GGUF_DEFAULT_ALIGNMENT: u32 = 32;
pub const GGML_KQ_MASK_PAD: u32 = 32;
pub const GGML_N_TASKS_MAX: i32 = -1;
pub const WHISPER_SAMPLE_RATE: u32 = 16000;
pub const WHISPER_N_FFT: u32 = 400;
pub const WHISPER_HOP_LENGTH: u32 = 160;
pub const WHISPER_CHUNK_SIZE: u32 = 30;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __mingw_get_crt_info() -> *const ::std::os::raw::c_char;
}
pub type rsize_t = usize;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type errno_t = ::std::os::raw::c_int;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadmbcinfostruct {
    _unused: [u8; 0],
}
pub type pthreadlocinfo = *mut threadlocaleinfostruct;
pub type pthreadmbcinfo = *mut threadmbcinfostruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __lc_time_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct localeinfo_struct {
    pub locinfo: pthreadlocinfo,
    pub mbcinfo: pthreadmbcinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of localeinfo_struct"][::std::mem::size_of::<localeinfo_struct>() - 16usize];
    ["Alignment of localeinfo_struct"][::std::mem::align_of::<localeinfo_struct>() - 8usize];
    ["Offset of field: localeinfo_struct::locinfo"]
        [::std::mem::offset_of!(localeinfo_struct, locinfo) - 0usize];
    ["Offset of field: localeinfo_struct::mbcinfo"]
        [::std::mem::offset_of!(localeinfo_struct, mbcinfo) - 8usize];
};
pub type _locale_tstruct = localeinfo_struct;
pub type _locale_t = *mut localeinfo_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLC_ID {
    pub wLanguage: ::std::os::raw::c_ushort,
    pub wCountry: ::std::os::raw::c_ushort,
    pub wCodePage: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLC_ID"][::std::mem::size_of::<tagLC_ID>() - 6usize];
    ["Alignment of tagLC_ID"][::std::mem::align_of::<tagLC_ID>() - 2usize];
    ["Offset of field: tagLC_ID::wLanguage"][::std::mem::offset_of!(tagLC_ID, wLanguage) - 0usize];
    ["Offset of field: tagLC_ID::wCountry"][::std::mem::offset_of!(tagLC_ID, wCountry) - 2usize];
    ["Offset of field: tagLC_ID::wCodePage"][::std::mem::offset_of!(tagLC_ID, wCodePage) - 4usize];
};
pub type LC_ID = tagLC_ID;
pub type LPLC_ID = *mut tagLC_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of threadlocaleinfostruct"][::std::mem::size_of::<threadlocaleinfostruct>() - 16usize];
    ["Alignment of threadlocaleinfostruct"]
        [::std::mem::align_of::<threadlocaleinfostruct>() - 8usize];
    ["Offset of field: threadlocaleinfostruct::_locale_pctype"]
        [::std::mem::offset_of!(threadlocaleinfostruct, _locale_pctype) - 0usize];
    ["Offset of field: threadlocaleinfostruct::_locale_mb_cur_max"]
        [::std::mem::offset_of!(threadlocaleinfostruct, _locale_mb_cur_max) - 8usize];
    ["Offset of field: threadlocaleinfostruct::_locale_lc_codepage"]
        [::std::mem::offset_of!(threadlocaleinfostruct, _locale_lc_codepage) - 12usize];
};
pub type threadlocinfo = threadlocaleinfostruct;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type int_least32_t = ::std::os::raw::c_int;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type int_fast16_t = ::std::os::raw::c_short;
pub type uint_fast16_t = ::std::os::raw::c_ushort;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _iobuf"][::std::mem::size_of::<_iobuf>() - 8usize];
    ["Alignment of _iobuf"][::std::mem::align_of::<_iobuf>() - 8usize];
    ["Offset of field: _iobuf::_Placeholder"]
        [::std::mem::offset_of!(_iobuf, _Placeholder) - 0usize];
};
pub type FILE = _iobuf;
pub type _off_t = ::std::os::raw::c_long;
pub type off32_t = ::std::os::raw::c_long;
pub type _off64_t = ::std::os::raw::c_longlong;
pub type off64_t = ::std::os::raw::c_longlong;
pub type off_t = off32_t;
extern "C" {
    pub fn __acrt_iob_func(index: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn __iob_func() -> *mut FILE;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn __mingw_sscanf(
        _Src: *const ::std::os::raw::c_char,
        _Format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vsscanf(
        _Str: *const ::std::os::raw::c_char,
        Format: *const ::std::os::raw::c_char,
        argp: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_scanf(_Format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vscanf(
        Format: *const ::std::os::raw::c_char,
        argp: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_fscanf(
        _File: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vfscanf(
        fp: *mut FILE,
        Format: *const ::std::os::raw::c_char,
        argp: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vsnprintf(
        _DstBuf: *mut ::std::os::raw::c_char,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_snprintf(
        s: *mut ::std::os::raw::c_char,
        n: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_sscanf(
        _Src: *const ::std::os::raw::c_char,
        _Format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_scanf(_Format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_fscanf(
        _File: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        options: ::std::os::raw::c_ulonglong,
        str_: *mut ::std::os::raw::c_char,
        len: usize,
        format: *const ::std::os::raw::c_char,
        locale: _locale_t,
        valist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        options: ::std::os::raw::c_ulonglong,
        file: *mut FILE,
        format: *const ::std::os::raw::c_char,
        locale: _locale_t,
        valist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        options: ::std::os::raw::c_ulonglong,
        input: *const ::std::os::raw::c_char,
        length: usize,
        format: *const ::std::os::raw::c_char,
        locale: _locale_t,
        valist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        options: ::std::os::raw::c_ulonglong,
        file: *mut FILE,
        format: *const ::std::os::raw::c_char,
        locale: _locale_t,
        valist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fprintf(
        _File: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(_Format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        _Dest: *mut ::std::os::raw::c_char,
        _Format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        _File: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _ArgList: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        _Format: *const ::std::os::raw::c_char,
        _ArgList: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        _Dest: *mut ::std::os::raw::c_char,
        _Format: *const ::std::os::raw::c_char,
        _Args: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        _File: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(_Format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        _Src: *const ::std::os::raw::c_char,
        _Format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __local_argv: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __source: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __local_argv: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __local_argv: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _filbuf(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flsbuf(_Ch: ::std::os::raw::c_int, _File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fsopen(
        _Filename: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn clearerr(_File: *mut FILE);
}
extern "C" {
    pub fn fclose(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_File: *mut FILE, _Pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos64(_File: *mut FILE, _Pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buf: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _File: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _Filename: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Ch: ::std::os::raw::c_int, _File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(_Str: *const ::std::os::raw::c_char, _File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _DstBuf: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _Count: ::std::os::raw::c_ulonglong,
        _File: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _Filename: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _File: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_File: *mut FILE, _Pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos64(_File: *mut FILE, _Pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _File: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_File: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _fseeki64(
        _File: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftelli64(_File: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Str: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
        _Count: ::std::os::raw::c_ulonglong,
        _File: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _getw(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Ch: ::std::os::raw::c_int, _File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_Filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFilename: *const ::std::os::raw::c_char,
        _NewFilename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_Filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_Filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_File: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_File: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Max: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_output_format(_Format: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _get_output_format() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn setvbuf(
        _File: *mut FILE,
        _Buf: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _scprintf(_Format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _snscanf(
        _Src: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vscprintf(
        _Format: *const ::std::os::raw::c_char,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Ch: ::std::os::raw::c_int, _File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vsnprintf(
        _Dest: *mut ::std::os::raw::c_char,
        _Count: usize,
        _Format: *const ::std::os::raw::c_char,
        _Args: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _snprintf(
        _Dest: *mut ::std::os::raw::c_char,
        _Count: usize,
        _Format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __stream: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulonglong,
        __format: *const ::std::os::raw::c_char,
        __local_argv: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __stream: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulonglong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_swscanf(
        _Src: *const wchar_t,
        _Format: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vswscanf(
        _Str: *const wchar_t,
        Format: *const wchar_t,
        argp: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_wscanf(_Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vwscanf(Format: *const wchar_t, argp: va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_fwscanf(_File: *mut FILE, _Format: *const wchar_t, ...)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vfwscanf(
        fp: *mut FILE,
        Format: *const wchar_t,
        argp: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_fwprintf(
        _File: *mut FILE,
        _Format: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_wprintf(_Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vfwprintf(
        _File: *mut FILE,
        _Format: *const wchar_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vwprintf(_Format: *const wchar_t, _ArgList: va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_snwprintf(
        s: *mut wchar_t,
        n: usize,
        format: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vsnwprintf(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_swprintf(arg1: *mut wchar_t, arg2: *const wchar_t, ...)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_vswprintf(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_swscanf(
        _Src: *const wchar_t,
        _Format: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_wscanf(_Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_fwscanf(_File: *mut FILE, _Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_fwprintf(_File: *mut FILE, _Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_wprintf(_Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_vfwprintf(
        _File: *mut FILE,
        _Format: *const wchar_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_vwprintf(_Format: *const wchar_t, _ArgList: va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_swprintf(arg1: *mut wchar_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ms_vswprintf(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        options: ::std::os::raw::c_ulonglong,
        str_: *mut wchar_t,
        len: usize,
        format: *const wchar_t,
        locale: _locale_t,
        valist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        options: ::std::os::raw::c_ulonglong,
        file: *mut FILE,
        format: *const wchar_t,
        locale: _locale_t,
        valist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        options: ::std::os::raw::c_ulonglong,
        input: *const wchar_t,
        length: usize,
        format: *const wchar_t,
        locale: _locale_t,
        valist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        options: ::std::os::raw::c_ulonglong,
        file: *mut FILE,
        format: *const wchar_t,
        locale: _locale_t,
        valist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(_File: *mut FILE, _Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfsopen(
        _Filename: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_File: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Ch: wchar_t, _File: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Ch: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_File: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn putwc(_Ch: wchar_t, _File: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Ch: wchar_t) -> wint_t;
}
extern "C" {
    pub fn ungetwc(_Ch: wint_t, _File: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Dst: *mut wchar_t,
        _SizeInWords: ::std::os::raw::c_int,
        _File: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Str: *const wchar_t, _File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _putws(_Str: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _snwprintf(
        _Dest: *mut wchar_t,
        _Count: usize,
        _Format: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vsnwprintf(
        _Dest: *mut wchar_t,
        _Count: usize,
        _Format: *const wchar_t,
        _Args: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _snwscanf(
        _Src: *const wchar_t,
        _MaxCount: usize,
        _Format: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_Filename: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen(
        _Filename: *const wchar_t,
        _Mode: *const wchar_t,
        _OldFile: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrMsg: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_Filename: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_File: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Ch: wchar_t, _File: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Ch: wint_t, _File: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetc_nolock(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(_Char: ::std::os::raw::c_int, _File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getc_nolock(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(_Char: ::std::os::raw::c_int, _File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_File: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_File: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _DstBuf: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _Count: usize,
        _File: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fseek_nolock(
        _File: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_File: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _File: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftelli64_nolock(_File: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _DstBuf: *const ::std::os::raw::c_void,
        _Size: usize,
        _Count: usize,
        _File: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _ungetc_nolock(_Ch: ::std::os::raw::c_int, _File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _File: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_str_wide_utf8(
        wptr: *const wchar_t,
        mbptr: *mut *mut ::std::os::raw::c_char,
        buflen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_str_utf8_wide(
        mbptr: *const ::std::os::raw::c_char,
        wptr: *mut *mut wchar_t,
        buflen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mingw_str_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _wspawnl(
        _Mode: ::std::os::raw::c_int,
        _Filename: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnle(
        _Mode: ::std::os::raw::c_int,
        _Filename: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnlp(
        _Mode: ::std::os::raw::c_int,
        _Filename: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnlpe(
        _Mode: ::std::os::raw::c_int,
        _Filename: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnv(
        _Mode: ::std::os::raw::c_int,
        _Filename: *const wchar_t,
        _ArgList: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnve(
        _Mode: ::std::os::raw::c_int,
        _Filename: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnvp(
        _Mode: ::std::os::raw::c_int,
        _Filename: *const wchar_t,
        _ArgList: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnvpe(
        _Mode: ::std::os::raw::c_int,
        _Filename: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _spawnv(
        _Mode: ::std::os::raw::c_int,
        _Filename: *const ::std::os::raw::c_char,
        _ArgList: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn _spawnve(
        _Mode: ::std::os::raw::c_int,
        _Filename: *const ::std::os::raw::c_char,
        _ArgList: *const *const ::std::os::raw::c_char,
        _Env: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn _spawnvp(
        _Mode: ::std::os::raw::c_int,
        _Filename: *const ::std::os::raw::c_char,
        _ArgList: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn _spawnvpe(
        _Mode: ::std::os::raw::c_int,
        _Filename: *const ::std::os::raw::c_char,
        _ArgList: *const *const ::std::os::raw::c_char,
        _Env: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn clearerr_s(_File: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _DstBuf: *mut ::std::os::raw::c_void,
        _DstSize: usize,
        _ElementSize: usize,
        _Count: usize,
        _File: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Str: *mut ::std::os::raw::c_char,
        _Len: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Str: *mut ::std::os::raw::c_char,
        _Len: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Str: *mut ::std::os::raw::c_char,
        _Len: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _File: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _File: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen_s(
        _File: *mut *mut FILE,
        _Filename: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn freopen_s(
        _File: *mut *mut FILE,
        _Filename: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(arg1: *mut ::std::os::raw::c_char, arg2: rsize_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_File: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(arg1: *mut ::std::os::raw::c_char, arg2: rsize_t) -> errno_t;
}
extern "C" {
    pub fn _getws_s(_Str: *mut wchar_t, _SizeInWords: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Str: *mut wchar_t,
        _Len: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Str: *mut wchar_t,
        _Len: usize,
        _MaxCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _File: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfopen_s(
        _File: *mut *mut FILE,
        _Filename: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen_s(
        _File: *mut *mut FILE,
        _Filename: *const wchar_t,
        _Mode: *const wchar_t,
        _OldFile: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam_s(_DstBuf: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _fread_nolock_s(
        _DstBuf: *mut ::std::os::raw::c_void,
        _DstSize: usize,
        _ElementSize: usize,
        _Count: usize,
        _File: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn ggml_abort(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> !;
}
pub const ggml_status_GGML_STATUS_ALLOC_FAILED: ggml_status = -2;
pub const ggml_status_GGML_STATUS_FAILED: ggml_status = -1;
pub const ggml_status_GGML_STATUS_SUCCESS: ggml_status = 0;
pub const ggml_status_GGML_STATUS_ABORTED: ggml_status = 1;
pub type ggml_status = ::std::os::raw::c_int;
extern "C" {
    pub fn ggml_status_to_string(status: ggml_status) -> *const ::std::os::raw::c_char;
}
pub type ggml_fp16_t = u16;
extern "C" {
    pub fn ggml_fp16_to_fp32(arg1: ggml_fp16_t) -> f32;
}
extern "C" {
    pub fn ggml_fp32_to_fp16(arg1: f32) -> ggml_fp16_t;
}
extern "C" {
    pub fn ggml_fp16_to_fp32_row(arg1: *const ggml_fp16_t, arg2: *mut f32, arg3: i64);
}
extern "C" {
    pub fn ggml_fp32_to_fp16_row(arg1: *const f32, arg2: *mut ggml_fp16_t, arg3: i64);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_bf16_t {
    pub bits: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_bf16_t"][::std::mem::size_of::<ggml_bf16_t>() - 2usize];
    ["Alignment of ggml_bf16_t"][::std::mem::align_of::<ggml_bf16_t>() - 2usize];
    ["Offset of field: ggml_bf16_t::bits"][::std::mem::offset_of!(ggml_bf16_t, bits) - 0usize];
};
extern "C" {
    pub fn ggml_fp32_to_bf16(arg1: f32) -> ggml_bf16_t;
}
extern "C" {
    pub fn ggml_bf16_to_fp32(arg1: ggml_bf16_t) -> f32;
}
extern "C" {
    pub fn ggml_bf16_to_fp32_row(arg1: *const ggml_bf16_t, arg2: *mut f32, arg3: i64);
}
extern "C" {
    pub fn ggml_fp32_to_bf16_row_ref(arg1: *const f32, arg2: *mut ggml_bf16_t, arg3: i64);
}
extern "C" {
    pub fn ggml_fp32_to_bf16_row(arg1: *const f32, arg2: *mut ggml_bf16_t, arg3: i64);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_object {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_cgraph {
    _unused: [u8; 0],
}
pub const ggml_type_GGML_TYPE_F32: ggml_type = 0;
pub const ggml_type_GGML_TYPE_F16: ggml_type = 1;
pub const ggml_type_GGML_TYPE_Q4_0: ggml_type = 2;
pub const ggml_type_GGML_TYPE_Q4_1: ggml_type = 3;
pub const ggml_type_GGML_TYPE_Q5_0: ggml_type = 6;
pub const ggml_type_GGML_TYPE_Q5_1: ggml_type = 7;
pub const ggml_type_GGML_TYPE_Q8_0: ggml_type = 8;
pub const ggml_type_GGML_TYPE_Q8_1: ggml_type = 9;
pub const ggml_type_GGML_TYPE_Q2_K: ggml_type = 10;
pub const ggml_type_GGML_TYPE_Q3_K: ggml_type = 11;
pub const ggml_type_GGML_TYPE_Q4_K: ggml_type = 12;
pub const ggml_type_GGML_TYPE_Q5_K: ggml_type = 13;
pub const ggml_type_GGML_TYPE_Q6_K: ggml_type = 14;
pub const ggml_type_GGML_TYPE_Q8_K: ggml_type = 15;
pub const ggml_type_GGML_TYPE_IQ2_XXS: ggml_type = 16;
pub const ggml_type_GGML_TYPE_IQ2_XS: ggml_type = 17;
pub const ggml_type_GGML_TYPE_IQ3_XXS: ggml_type = 18;
pub const ggml_type_GGML_TYPE_IQ1_S: ggml_type = 19;
pub const ggml_type_GGML_TYPE_IQ4_NL: ggml_type = 20;
pub const ggml_type_GGML_TYPE_IQ3_S: ggml_type = 21;
pub const ggml_type_GGML_TYPE_IQ2_S: ggml_type = 22;
pub const ggml_type_GGML_TYPE_IQ4_XS: ggml_type = 23;
pub const ggml_type_GGML_TYPE_I8: ggml_type = 24;
pub const ggml_type_GGML_TYPE_I16: ggml_type = 25;
pub const ggml_type_GGML_TYPE_I32: ggml_type = 26;
pub const ggml_type_GGML_TYPE_I64: ggml_type = 27;
pub const ggml_type_GGML_TYPE_F64: ggml_type = 28;
pub const ggml_type_GGML_TYPE_IQ1_M: ggml_type = 29;
pub const ggml_type_GGML_TYPE_BF16: ggml_type = 30;
pub const ggml_type_GGML_TYPE_Q4_0_4_4: ggml_type = 31;
pub const ggml_type_GGML_TYPE_Q4_0_4_8: ggml_type = 32;
pub const ggml_type_GGML_TYPE_Q4_0_8_8: ggml_type = 33;
pub const ggml_type_GGML_TYPE_TQ1_0: ggml_type = 34;
pub const ggml_type_GGML_TYPE_TQ2_0: ggml_type = 35;
pub const ggml_type_GGML_TYPE_COUNT: ggml_type = 36;
pub type ggml_type = ::std::os::raw::c_int;
pub const ggml_prec_GGML_PREC_DEFAULT: ggml_prec = 0;
pub const ggml_prec_GGML_PREC_F32: ggml_prec = 1;
pub type ggml_prec = ::std::os::raw::c_int;
pub const ggml_backend_type_GGML_BACKEND_TYPE_CPU: ggml_backend_type = 0;
pub const ggml_backend_type_GGML_BACKEND_TYPE_GPU: ggml_backend_type = 10;
pub const ggml_backend_type_GGML_BACKEND_TYPE_GPU_SPLIT: ggml_backend_type = 20;
pub type ggml_backend_type = ::std::os::raw::c_int;
pub const ggml_ftype_GGML_FTYPE_UNKNOWN: ggml_ftype = -1;
pub const ggml_ftype_GGML_FTYPE_ALL_F32: ggml_ftype = 0;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_F16: ggml_ftype = 1;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_0: ggml_ftype = 2;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_1: ggml_ftype = 3;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_1_SOME_F16: ggml_ftype = 4;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q8_0: ggml_ftype = 7;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q5_0: ggml_ftype = 8;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q5_1: ggml_ftype = 9;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q2_K: ggml_ftype = 10;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q3_K: ggml_ftype = 11;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_K: ggml_ftype = 12;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q5_K: ggml_ftype = 13;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q6_K: ggml_ftype = 14;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ2_XXS: ggml_ftype = 15;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ2_XS: ggml_ftype = 16;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ3_XXS: ggml_ftype = 17;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ1_S: ggml_ftype = 18;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ4_NL: ggml_ftype = 19;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ3_S: ggml_ftype = 20;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ2_S: ggml_ftype = 21;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ4_XS: ggml_ftype = 22;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ1_M: ggml_ftype = 23;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_BF16: ggml_ftype = 24;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_0_4_4: ggml_ftype = 25;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_0_4_8: ggml_ftype = 26;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_0_8_8: ggml_ftype = 27;
pub type ggml_ftype = ::std::os::raw::c_int;
pub const ggml_op_GGML_OP_NONE: ggml_op = 0;
pub const ggml_op_GGML_OP_DUP: ggml_op = 1;
pub const ggml_op_GGML_OP_ADD: ggml_op = 2;
pub const ggml_op_GGML_OP_ADD1: ggml_op = 3;
pub const ggml_op_GGML_OP_ACC: ggml_op = 4;
pub const ggml_op_GGML_OP_SUB: ggml_op = 5;
pub const ggml_op_GGML_OP_MUL: ggml_op = 6;
pub const ggml_op_GGML_OP_DIV: ggml_op = 7;
pub const ggml_op_GGML_OP_SQR: ggml_op = 8;
pub const ggml_op_GGML_OP_SQRT: ggml_op = 9;
pub const ggml_op_GGML_OP_LOG: ggml_op = 10;
pub const ggml_op_GGML_OP_SIN: ggml_op = 11;
pub const ggml_op_GGML_OP_COS: ggml_op = 12;
pub const ggml_op_GGML_OP_SUM: ggml_op = 13;
pub const ggml_op_GGML_OP_SUM_ROWS: ggml_op = 14;
pub const ggml_op_GGML_OP_MEAN: ggml_op = 15;
pub const ggml_op_GGML_OP_ARGMAX: ggml_op = 16;
pub const ggml_op_GGML_OP_COUNT_EQUAL: ggml_op = 17;
pub const ggml_op_GGML_OP_REPEAT: ggml_op = 18;
pub const ggml_op_GGML_OP_REPEAT_BACK: ggml_op = 19;
pub const ggml_op_GGML_OP_CONCAT: ggml_op = 20;
pub const ggml_op_GGML_OP_SILU_BACK: ggml_op = 21;
pub const ggml_op_GGML_OP_NORM: ggml_op = 22;
pub const ggml_op_GGML_OP_RMS_NORM: ggml_op = 23;
pub const ggml_op_GGML_OP_RMS_NORM_BACK: ggml_op = 24;
pub const ggml_op_GGML_OP_GROUP_NORM: ggml_op = 25;
pub const ggml_op_GGML_OP_MUL_MAT: ggml_op = 26;
pub const ggml_op_GGML_OP_MUL_MAT_ID: ggml_op = 27;
pub const ggml_op_GGML_OP_OUT_PROD: ggml_op = 28;
pub const ggml_op_GGML_OP_SCALE: ggml_op = 29;
pub const ggml_op_GGML_OP_SET: ggml_op = 30;
pub const ggml_op_GGML_OP_CPY: ggml_op = 31;
pub const ggml_op_GGML_OP_CONT: ggml_op = 32;
pub const ggml_op_GGML_OP_RESHAPE: ggml_op = 33;
pub const ggml_op_GGML_OP_VIEW: ggml_op = 34;
pub const ggml_op_GGML_OP_PERMUTE: ggml_op = 35;
pub const ggml_op_GGML_OP_TRANSPOSE: ggml_op = 36;
pub const ggml_op_GGML_OP_GET_ROWS: ggml_op = 37;
pub const ggml_op_GGML_OP_GET_ROWS_BACK: ggml_op = 38;
pub const ggml_op_GGML_OP_DIAG: ggml_op = 39;
pub const ggml_op_GGML_OP_DIAG_MASK_INF: ggml_op = 40;
pub const ggml_op_GGML_OP_DIAG_MASK_ZERO: ggml_op = 41;
pub const ggml_op_GGML_OP_SOFT_MAX: ggml_op = 42;
pub const ggml_op_GGML_OP_SOFT_MAX_BACK: ggml_op = 43;
pub const ggml_op_GGML_OP_ROPE: ggml_op = 44;
pub const ggml_op_GGML_OP_ROPE_BACK: ggml_op = 45;
pub const ggml_op_GGML_OP_CLAMP: ggml_op = 46;
pub const ggml_op_GGML_OP_CONV_TRANSPOSE_1D: ggml_op = 47;
pub const ggml_op_GGML_OP_IM2COL: ggml_op = 48;
pub const ggml_op_GGML_OP_IM2COL_BACK: ggml_op = 49;
pub const ggml_op_GGML_OP_CONV_TRANSPOSE_2D: ggml_op = 50;
pub const ggml_op_GGML_OP_POOL_1D: ggml_op = 51;
pub const ggml_op_GGML_OP_POOL_2D: ggml_op = 52;
pub const ggml_op_GGML_OP_POOL_2D_BACK: ggml_op = 53;
pub const ggml_op_GGML_OP_UPSCALE: ggml_op = 54;
pub const ggml_op_GGML_OP_PAD: ggml_op = 55;
pub const ggml_op_GGML_OP_ARANGE: ggml_op = 56;
pub const ggml_op_GGML_OP_TIMESTEP_EMBEDDING: ggml_op = 57;
pub const ggml_op_GGML_OP_ARGSORT: ggml_op = 58;
pub const ggml_op_GGML_OP_LEAKY_RELU: ggml_op = 59;
pub const ggml_op_GGML_OP_FLASH_ATTN_EXT: ggml_op = 60;
pub const ggml_op_GGML_OP_FLASH_ATTN_BACK: ggml_op = 61;
pub const ggml_op_GGML_OP_SSM_CONV: ggml_op = 62;
pub const ggml_op_GGML_OP_SSM_SCAN: ggml_op = 63;
pub const ggml_op_GGML_OP_WIN_PART: ggml_op = 64;
pub const ggml_op_GGML_OP_WIN_UNPART: ggml_op = 65;
pub const ggml_op_GGML_OP_GET_REL_POS: ggml_op = 66;
pub const ggml_op_GGML_OP_ADD_REL_POS: ggml_op = 67;
pub const ggml_op_GGML_OP_RWKV_WKV: ggml_op = 68;
pub const ggml_op_GGML_OP_UNARY: ggml_op = 69;
pub const ggml_op_GGML_OP_MAP_UNARY: ggml_op = 70;
pub const ggml_op_GGML_OP_MAP_BINARY: ggml_op = 71;
pub const ggml_op_GGML_OP_MAP_CUSTOM1_F32: ggml_op = 72;
pub const ggml_op_GGML_OP_MAP_CUSTOM2_F32: ggml_op = 73;
pub const ggml_op_GGML_OP_MAP_CUSTOM3_F32: ggml_op = 74;
pub const ggml_op_GGML_OP_MAP_CUSTOM1: ggml_op = 75;
pub const ggml_op_GGML_OP_MAP_CUSTOM2: ggml_op = 76;
pub const ggml_op_GGML_OP_MAP_CUSTOM3: ggml_op = 77;
pub const ggml_op_GGML_OP_CROSS_ENTROPY_LOSS: ggml_op = 78;
pub const ggml_op_GGML_OP_CROSS_ENTROPY_LOSS_BACK: ggml_op = 79;
pub const ggml_op_GGML_OP_OPT_STEP_ADAMW: ggml_op = 80;
pub const ggml_op_GGML_OP_COUNT: ggml_op = 81;
pub type ggml_op = ::std::os::raw::c_int;
pub const ggml_unary_op_GGML_UNARY_OP_ABS: ggml_unary_op = 0;
pub const ggml_unary_op_GGML_UNARY_OP_SGN: ggml_unary_op = 1;
pub const ggml_unary_op_GGML_UNARY_OP_NEG: ggml_unary_op = 2;
pub const ggml_unary_op_GGML_UNARY_OP_STEP: ggml_unary_op = 3;
pub const ggml_unary_op_GGML_UNARY_OP_TANH: ggml_unary_op = 4;
pub const ggml_unary_op_GGML_UNARY_OP_ELU: ggml_unary_op = 5;
pub const ggml_unary_op_GGML_UNARY_OP_RELU: ggml_unary_op = 6;
pub const ggml_unary_op_GGML_UNARY_OP_SIGMOID: ggml_unary_op = 7;
pub const ggml_unary_op_GGML_UNARY_OP_GELU: ggml_unary_op = 8;
pub const ggml_unary_op_GGML_UNARY_OP_GELU_QUICK: ggml_unary_op = 9;
pub const ggml_unary_op_GGML_UNARY_OP_SILU: ggml_unary_op = 10;
pub const ggml_unary_op_GGML_UNARY_OP_HARDSWISH: ggml_unary_op = 11;
pub const ggml_unary_op_GGML_UNARY_OP_HARDSIGMOID: ggml_unary_op = 12;
pub const ggml_unary_op_GGML_UNARY_OP_EXP: ggml_unary_op = 13;
pub const ggml_unary_op_GGML_UNARY_OP_COUNT: ggml_unary_op = 14;
pub type ggml_unary_op = ::std::os::raw::c_int;
pub const ggml_object_type_GGML_OBJECT_TYPE_TENSOR: ggml_object_type = 0;
pub const ggml_object_type_GGML_OBJECT_TYPE_GRAPH: ggml_object_type = 1;
pub const ggml_object_type_GGML_OBJECT_TYPE_WORK_BUFFER: ggml_object_type = 2;
pub type ggml_object_type = ::std::os::raw::c_int;
pub const ggml_log_level_GGML_LOG_LEVEL_NONE: ggml_log_level = 0;
pub const ggml_log_level_GGML_LOG_LEVEL_INFO: ggml_log_level = 1;
pub const ggml_log_level_GGML_LOG_LEVEL_WARN: ggml_log_level = 2;
pub const ggml_log_level_GGML_LOG_LEVEL_ERROR: ggml_log_level = 3;
pub const ggml_log_level_GGML_LOG_LEVEL_DEBUG: ggml_log_level = 4;
pub const ggml_log_level_GGML_LOG_LEVEL_CONT: ggml_log_level = 5;
pub type ggml_log_level = ::std::os::raw::c_int;
pub const ggml_tensor_flag_GGML_TENSOR_FLAG_INPUT: ggml_tensor_flag = 1;
pub const ggml_tensor_flag_GGML_TENSOR_FLAG_OUTPUT: ggml_tensor_flag = 2;
pub const ggml_tensor_flag_GGML_TENSOR_FLAG_PARAM: ggml_tensor_flag = 4;
pub const ggml_tensor_flag_GGML_TENSOR_FLAG_LOSS: ggml_tensor_flag = 8;
pub type ggml_tensor_flag = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_tensor {
    pub type_: ggml_type,
    pub backend: ggml_backend_type,
    pub buffer: *mut ggml_backend_buffer,
    pub ne: [i64; 4usize],
    pub nb: [usize; 4usize],
    pub op: ggml_op,
    pub op_params: [i32; 16usize],
    pub flags: i32,
    pub grad: *mut ggml_tensor,
    pub src: [*mut ggml_tensor; 10usize],
    pub view_src: *mut ggml_tensor,
    pub view_offs: usize,
    pub data: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 64usize],
    pub extra: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_tensor"][::std::mem::size_of::<ggml_tensor>() - 336usize];
    ["Alignment of ggml_tensor"][::std::mem::align_of::<ggml_tensor>() - 8usize];
    ["Offset of field: ggml_tensor::type_"][::std::mem::offset_of!(ggml_tensor, type_) - 0usize];
    ["Offset of field: ggml_tensor::backend"]
        [::std::mem::offset_of!(ggml_tensor, backend) - 4usize];
    ["Offset of field: ggml_tensor::buffer"][::std::mem::offset_of!(ggml_tensor, buffer) - 8usize];
    ["Offset of field: ggml_tensor::ne"][::std::mem::offset_of!(ggml_tensor, ne) - 16usize];
    ["Offset of field: ggml_tensor::nb"][::std::mem::offset_of!(ggml_tensor, nb) - 48usize];
    ["Offset of field: ggml_tensor::op"][::std::mem::offset_of!(ggml_tensor, op) - 80usize];
    ["Offset of field: ggml_tensor::op_params"]
        [::std::mem::offset_of!(ggml_tensor, op_params) - 84usize];
    ["Offset of field: ggml_tensor::flags"][::std::mem::offset_of!(ggml_tensor, flags) - 148usize];
    ["Offset of field: ggml_tensor::grad"][::std::mem::offset_of!(ggml_tensor, grad) - 152usize];
    ["Offset of field: ggml_tensor::src"][::std::mem::offset_of!(ggml_tensor, src) - 160usize];
    ["Offset of field: ggml_tensor::view_src"]
        [::std::mem::offset_of!(ggml_tensor, view_src) - 240usize];
    ["Offset of field: ggml_tensor::view_offs"]
        [::std::mem::offset_of!(ggml_tensor, view_offs) - 248usize];
    ["Offset of field: ggml_tensor::data"][::std::mem::offset_of!(ggml_tensor, data) - 256usize];
    ["Offset of field: ggml_tensor::name"][::std::mem::offset_of!(ggml_tensor, name) - 264usize];
    ["Offset of field: ggml_tensor::extra"][::std::mem::offset_of!(ggml_tensor, extra) - 328usize];
};
pub const GGML_TENSOR_SIZE: usize = 336;
pub type ggml_abort_callback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> bool>;
pub const ggml_sched_priority_GGML_SCHED_PRIO_NORMAL: ggml_sched_priority = 0;
pub const ggml_sched_priority_GGML_SCHED_PRIO_MEDIUM: ggml_sched_priority = 1;
pub const ggml_sched_priority_GGML_SCHED_PRIO_HIGH: ggml_sched_priority = 2;
pub const ggml_sched_priority_GGML_SCHED_PRIO_REALTIME: ggml_sched_priority = 3;
pub type ggml_sched_priority = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_threadpool_params {
    pub cpumask: [bool; 512usize],
    pub n_threads: ::std::os::raw::c_int,
    pub prio: ggml_sched_priority,
    pub poll: u32,
    pub strict_cpu: bool,
    pub paused: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_threadpool_params"][::std::mem::size_of::<ggml_threadpool_params>() - 528usize];
    ["Alignment of ggml_threadpool_params"]
        [::std::mem::align_of::<ggml_threadpool_params>() - 4usize];
    ["Offset of field: ggml_threadpool_params::cpumask"]
        [::std::mem::offset_of!(ggml_threadpool_params, cpumask) - 0usize];
    ["Offset of field: ggml_threadpool_params::n_threads"]
        [::std::mem::offset_of!(ggml_threadpool_params, n_threads) - 512usize];
    ["Offset of field: ggml_threadpool_params::prio"]
        [::std::mem::offset_of!(ggml_threadpool_params, prio) - 516usize];
    ["Offset of field: ggml_threadpool_params::poll"]
        [::std::mem::offset_of!(ggml_threadpool_params, poll) - 520usize];
    ["Offset of field: ggml_threadpool_params::strict_cpu"]
        [::std::mem::offset_of!(ggml_threadpool_params, strict_cpu) - 524usize];
    ["Offset of field: ggml_threadpool_params::paused"]
        [::std::mem::offset_of!(ggml_threadpool_params, paused) - 525usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_threadpool {
    _unused: [u8; 0],
}
pub type ggml_threadpool_t = *mut ggml_threadpool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_cplan {
    pub work_size: usize,
    pub work_data: *mut u8,
    pub n_threads: ::std::os::raw::c_int,
    pub threadpool: *mut ggml_threadpool,
    pub abort_callback: ggml_abort_callback,
    pub abort_callback_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_cplan"][::std::mem::size_of::<ggml_cplan>() - 48usize];
    ["Alignment of ggml_cplan"][::std::mem::align_of::<ggml_cplan>() - 8usize];
    ["Offset of field: ggml_cplan::work_size"]
        [::std::mem::offset_of!(ggml_cplan, work_size) - 0usize];
    ["Offset of field: ggml_cplan::work_data"]
        [::std::mem::offset_of!(ggml_cplan, work_data) - 8usize];
    ["Offset of field: ggml_cplan::n_threads"]
        [::std::mem::offset_of!(ggml_cplan, n_threads) - 16usize];
    ["Offset of field: ggml_cplan::threadpool"]
        [::std::mem::offset_of!(ggml_cplan, threadpool) - 24usize];
    ["Offset of field: ggml_cplan::abort_callback"]
        [::std::mem::offset_of!(ggml_cplan, abort_callback) - 32usize];
    ["Offset of field: ggml_cplan::abort_callback_data"]
        [::std::mem::offset_of!(ggml_cplan, abort_callback_data) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_scratch {
    pub offs: usize,
    pub size: usize,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_scratch"][::std::mem::size_of::<ggml_scratch>() - 24usize];
    ["Alignment of ggml_scratch"][::std::mem::align_of::<ggml_scratch>() - 8usize];
    ["Offset of field: ggml_scratch::offs"][::std::mem::offset_of!(ggml_scratch, offs) - 0usize];
    ["Offset of field: ggml_scratch::size"][::std::mem::offset_of!(ggml_scratch, size) - 8usize];
    ["Offset of field: ggml_scratch::data"][::std::mem::offset_of!(ggml_scratch, data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_init_params {
    pub mem_size: usize,
    pub mem_buffer: *mut ::std::os::raw::c_void,
    pub no_alloc: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_init_params"][::std::mem::size_of::<ggml_init_params>() - 24usize];
    ["Alignment of ggml_init_params"][::std::mem::align_of::<ggml_init_params>() - 8usize];
    ["Offset of field: ggml_init_params::mem_size"]
        [::std::mem::offset_of!(ggml_init_params, mem_size) - 0usize];
    ["Offset of field: ggml_init_params::mem_buffer"]
        [::std::mem::offset_of!(ggml_init_params, mem_buffer) - 8usize];
    ["Offset of field: ggml_init_params::no_alloc"]
        [::std::mem::offset_of!(ggml_init_params, no_alloc) - 16usize];
};
pub const ggml_numa_strategy_GGML_NUMA_STRATEGY_DISABLED: ggml_numa_strategy = 0;
pub const ggml_numa_strategy_GGML_NUMA_STRATEGY_DISTRIBUTE: ggml_numa_strategy = 1;
pub const ggml_numa_strategy_GGML_NUMA_STRATEGY_ISOLATE: ggml_numa_strategy = 2;
pub const ggml_numa_strategy_GGML_NUMA_STRATEGY_NUMACTL: ggml_numa_strategy = 3;
pub const ggml_numa_strategy_GGML_NUMA_STRATEGY_MIRROR: ggml_numa_strategy = 4;
pub const ggml_numa_strategy_GGML_NUMA_STRATEGY_COUNT: ggml_numa_strategy = 5;
pub type ggml_numa_strategy = ::std::os::raw::c_int;
pub type ggml_guid = [u8; 16usize];
pub type ggml_guid_t = *mut ggml_guid;
extern "C" {
    pub fn ggml_guid_matches(guid_a: ggml_guid_t, guid_b: ggml_guid_t) -> bool;
}
extern "C" {
    pub fn ggml_time_init();
}
extern "C" {
    pub fn ggml_time_ms() -> i64;
}
extern "C" {
    pub fn ggml_time_us() -> i64;
}
extern "C" {
    pub fn ggml_cycles() -> i64;
}
extern "C" {
    pub fn ggml_cycles_per_ms() -> i64;
}
extern "C" {
    pub fn ggml_fopen(
        fname: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ggml_numa_init(numa: ggml_numa_strategy);
}
extern "C" {
    pub fn ggml_is_numa() -> bool;
}
extern "C" {
    pub fn ggml_print_object(obj: *const ggml_object);
}
extern "C" {
    pub fn ggml_print_objects(ctx: *const ggml_context);
}
extern "C" {
    pub fn ggml_nelements(tensor: *const ggml_tensor) -> i64;
}
extern "C" {
    pub fn ggml_nrows(tensor: *const ggml_tensor) -> i64;
}
extern "C" {
    pub fn ggml_nbytes(tensor: *const ggml_tensor) -> usize;
}
extern "C" {
    pub fn ggml_nbytes_pad(tensor: *const ggml_tensor) -> usize;
}
extern "C" {
    pub fn ggml_blck_size(type_: ggml_type) -> i64;
}
extern "C" {
    pub fn ggml_type_size(type_: ggml_type) -> usize;
}
extern "C" {
    pub fn ggml_row_size(type_: ggml_type, ne: i64) -> usize;
}
extern "C" {
    pub fn ggml_type_sizef(type_: ggml_type) -> f64;
}
extern "C" {
    pub fn ggml_type_name(type_: ggml_type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ggml_op_name(op: ggml_op) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ggml_op_symbol(op: ggml_op) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ggml_unary_op_name(op: ggml_unary_op) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ggml_op_desc(t: *const ggml_tensor) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ggml_element_size(tensor: *const ggml_tensor) -> usize;
}
extern "C" {
    pub fn ggml_is_quantized(type_: ggml_type) -> bool;
}
extern "C" {
    pub fn ggml_ftype_to_ggml_type(ftype: ggml_ftype) -> ggml_type;
}
extern "C" {
    pub fn ggml_is_transposed(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_is_permuted(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_is_empty(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_is_scalar(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_is_vector(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_is_matrix(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_is_3d(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_n_dims(tensor: *const ggml_tensor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_is_contiguous(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_is_contiguous_0(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_is_contiguous_1(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_is_contiguous_2(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_are_same_shape(t0: *const ggml_tensor, t1: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_are_same_stride(t0: *const ggml_tensor, t1: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_can_repeat(t0: *const ggml_tensor, t1: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_tensor_overhead() -> usize;
}
extern "C" {
    pub fn ggml_validate_row_data(
        type_: ggml_type,
        data: *const ::std::os::raw::c_void,
        nbytes: usize,
    ) -> bool;
}
extern "C" {
    pub fn ggml_init(params: ggml_init_params) -> *mut ggml_context;
}
extern "C" {
    pub fn ggml_free(ctx: *mut ggml_context);
}
extern "C" {
    pub fn ggml_used_mem(ctx: *const ggml_context) -> usize;
}
extern "C" {
    pub fn ggml_set_scratch(ctx: *mut ggml_context, scratch: ggml_scratch) -> usize;
}
extern "C" {
    pub fn ggml_get_no_alloc(ctx: *mut ggml_context) -> bool;
}
extern "C" {
    pub fn ggml_set_no_alloc(ctx: *mut ggml_context, no_alloc: bool);
}
extern "C" {
    pub fn ggml_get_mem_buffer(ctx: *const ggml_context) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ggml_get_mem_size(ctx: *const ggml_context) -> usize;
}
extern "C" {
    pub fn ggml_get_max_tensor_size(ctx: *const ggml_context) -> usize;
}
extern "C" {
    pub fn ggml_new_tensor(
        ctx: *mut ggml_context,
        type_: ggml_type,
        n_dims: ::std::os::raw::c_int,
        ne: *const i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_new_tensor_1d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_new_tensor_2d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_new_tensor_3d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_new_tensor_4d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_new_i32(ctx: *mut ggml_context, value: i32) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_new_f32(ctx: *mut ggml_context, value: f32) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_dup_tensor(ctx: *mut ggml_context, src: *const ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_view_tensor(ctx: *mut ggml_context, src: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_get_first_tensor(ctx: *const ggml_context) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_get_next_tensor(
        ctx: *const ggml_context,
        tensor: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_get_tensor(
        ctx: *mut ggml_context,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_zero(tensor: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_i32(tensor: *mut ggml_tensor, value: i32) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_f32(tensor: *mut ggml_tensor, value: f32) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_unravel_index(
        tensor: *const ggml_tensor,
        i: i64,
        i0: *mut i64,
        i1: *mut i64,
        i2: *mut i64,
        i3: *mut i64,
    );
}
extern "C" {
    pub fn ggml_get_i32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int) -> i32;
}
extern "C" {
    pub fn ggml_set_i32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int, value: i32);
}
extern "C" {
    pub fn ggml_get_i32_nd(
        tensor: *const ggml_tensor,
        i0: ::std::os::raw::c_int,
        i1: ::std::os::raw::c_int,
        i2: ::std::os::raw::c_int,
        i3: ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn ggml_set_i32_nd(
        tensor: *const ggml_tensor,
        i0: ::std::os::raw::c_int,
        i1: ::std::os::raw::c_int,
        i2: ::std::os::raw::c_int,
        i3: ::std::os::raw::c_int,
        value: i32,
    );
}
extern "C" {
    pub fn ggml_get_f32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ggml_set_f32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int, value: f32);
}
extern "C" {
    pub fn ggml_get_f32_nd(
        tensor: *const ggml_tensor,
        i0: ::std::os::raw::c_int,
        i1: ::std::os::raw::c_int,
        i2: ::std::os::raw::c_int,
        i3: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn ggml_set_f32_nd(
        tensor: *const ggml_tensor,
        i0: ::std::os::raw::c_int,
        i1: ::std::os::raw::c_int,
        i2: ::std::os::raw::c_int,
        i3: ::std::os::raw::c_int,
        value: f32,
    );
}
extern "C" {
    pub fn ggml_get_data(tensor: *const ggml_tensor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ggml_get_data_f32(tensor: *const ggml_tensor) -> *mut f32;
}
extern "C" {
    pub fn ggml_get_unary_op(tensor: *const ggml_tensor) -> ggml_unary_op;
}
extern "C" {
    pub fn ggml_get_name(tensor: *const ggml_tensor) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ggml_set_name(
        tensor: *mut ggml_tensor,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_format_name(
        tensor: *mut ggml_tensor,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_dup(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_dup_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_add(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_add_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_add_cast(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        type_: ggml_type,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_add1(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_add1_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_acc(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_acc_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sub(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sub_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_mul(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_mul_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_div(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_div_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sqr(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sqr_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sqrt(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sqrt_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_log(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_log_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sin(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sin_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cos(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cos_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sum(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sum_rows(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_mean(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_argmax(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_count_equal(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_repeat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_repeat_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_concat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        dim: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_abs(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_abs_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sgn(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sgn_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_neg(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_neg_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_step(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_step_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_tanh(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_tanh_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_elu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_elu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_relu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_leaky_relu(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        negative_slope: f32,
        inplace: bool,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_relu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sigmoid(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sigmoid_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_gelu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_gelu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_gelu_quick(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_gelu_quick_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor)
        -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_silu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_silu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_silu_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_hardswish(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_hardsigmoid(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_exp(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_exp_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_norm(ctx: *mut ggml_context, a: *mut ggml_tensor, eps: f32) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rms_norm(ctx: *mut ggml_context, a: *mut ggml_tensor, eps: f32)
        -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rms_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_group_norm(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_groups: ::std::os::raw::c_int,
        eps: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_group_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_groups: ::std::os::raw::c_int,
        eps: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rms_norm_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_mul_mat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_mul_mat_set_prec(a: *mut ggml_tensor, prec: ggml_prec);
}
extern "C" {
    pub fn ggml_mul_mat_id(
        ctx: *mut ggml_context,
        as_: *mut ggml_tensor,
        b: *mut ggml_tensor,
        ids: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_out_prod(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_scale(ctx: *mut ggml_context, a: *mut ggml_tensor, s: f32) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_scale_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        s: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_1d_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_2d_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cpy(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cast(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        type_: ggml_type,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cont(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cont_1d(ctx: *mut ggml_context, a: *mut ggml_tensor, ne0: i64) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cont_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cont_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cont_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_reshape(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_reshape_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_reshape_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_reshape_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_reshape_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_view_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_view_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_view_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        nb1: usize,
        nb2: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_view_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_permute(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        axis0: ::std::os::raw::c_int,
        axis1: ::std::os::raw::c_int,
        axis2: ::std::os::raw::c_int,
        axis3: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_transpose(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_get_rows(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_get_rows_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_diag(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_diag_mask_inf(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_diag_mask_inf_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_diag_mask_zero(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_diag_mask_zero_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_soft_max(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_soft_max_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_soft_max_ext(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        mask: *mut ggml_tensor,
        scale: f32,
        max_bias: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_soft_max_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_soft_max_back_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rope(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rope_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rope_ext(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rope_ext_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rope_custom(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rope_custom_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rope_yarn_corr_dims(
        n_dims: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        beta_fast: f32,
        beta_slow: f32,
        dims: *mut f32,
    );
}
extern "C" {
    pub fn ggml_rope_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_clamp(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        min: f32,
        max: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_im2col(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
        is_2D: bool,
        dst_type: ggml_type,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_im2col_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        ne: *mut i64,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
        is_2D: bool,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_conv_depthwise_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_conv_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_conv_1d_ph(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_conv_transpose_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_conv_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_conv_2d_sk_p0(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_conv_2d_s1_ph(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_conv_transpose_2d_p0(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        stride: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
pub const ggml_op_pool_GGML_OP_POOL_MAX: ggml_op_pool = 0;
pub const ggml_op_pool_GGML_OP_POOL_AVG: ggml_op_pool = 1;
pub const ggml_op_pool_GGML_OP_POOL_COUNT: ggml_op_pool = 2;
pub type ggml_op_pool = ::std::os::raw::c_int;
extern "C" {
    pub fn ggml_pool_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_op_pool,
        k0: ::std::os::raw::c_int,
        s0: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_pool_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_op_pool,
        k0: ::std::os::raw::c_int,
        k1: ::std::os::raw::c_int,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: f32,
        p1: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_pool_2d_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        af: *mut ggml_tensor,
        op: ggml_op_pool,
        k0: ::std::os::raw::c_int,
        k1: ::std::os::raw::c_int,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: f32,
        p1: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_upscale(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        scale_factor: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_upscale_ext(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: ::std::os::raw::c_int,
        ne1: ::std::os::raw::c_int,
        ne2: ::std::os::raw::c_int,
        ne3: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_pad(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        p2: ::std::os::raw::c_int,
        p3: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_timestep_embedding(
        ctx: *mut ggml_context,
        timesteps: *mut ggml_tensor,
        dim: ::std::os::raw::c_int,
        max_period: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
pub const ggml_sort_order_GGML_SORT_ORDER_ASC: ggml_sort_order = 0;
pub const ggml_sort_order_GGML_SORT_ORDER_DESC: ggml_sort_order = 1;
pub type ggml_sort_order = ::std::os::raw::c_int;
extern "C" {
    pub fn ggml_argsort(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        order: ggml_sort_order,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_arange(
        ctx: *mut ggml_context,
        start: f32,
        stop: f32,
        step: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_top_k(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        k: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_flash_attn_ext(
        ctx: *mut ggml_context,
        q: *mut ggml_tensor,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        mask: *mut ggml_tensor,
        scale: f32,
        max_bias: f32,
        logit_softcap: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_flash_attn_ext_set_prec(a: *mut ggml_tensor, prec: ggml_prec);
}
extern "C" {
    pub fn ggml_flash_attn_back(
        ctx: *mut ggml_context,
        q: *mut ggml_tensor,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        d: *mut ggml_tensor,
        masked: bool,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_ssm_conv(
        ctx: *mut ggml_context,
        sx: *mut ggml_tensor,
        c: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_ssm_scan(
        ctx: *mut ggml_context,
        s: *mut ggml_tensor,
        x: *mut ggml_tensor,
        dt: *mut ggml_tensor,
        A: *mut ggml_tensor,
        B: *mut ggml_tensor,
        C: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_win_part(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        w: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_win_unpart(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        w0: ::std::os::raw::c_int,
        h0: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_unary(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_unary_op,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_unary_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_unary_op,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_get_rel_pos(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        qh: ::std::os::raw::c_int,
        kh: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_add_rel_pos(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        pw: *mut ggml_tensor,
        ph: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_add_rel_pos_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        pw: *mut ggml_tensor,
        ph: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rwkv_wkv(
        ctx: *mut ggml_context,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        r: *mut ggml_tensor,
        tf: *mut ggml_tensor,
        td: *mut ggml_tensor,
        state: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
pub type ggml_unary_op_f32_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut f32, arg3: *const f32),
>;
pub type ggml_binary_op_f32_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut f32,
        arg3: *const f32,
        arg4: *const f32,
    ),
>;
pub type ggml_custom1_op_f32_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ggml_tensor, arg2: *const ggml_tensor)>;
pub type ggml_custom2_op_f32_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ggml_tensor,
        arg2: *const ggml_tensor,
        arg3: *const ggml_tensor,
    ),
>;
pub type ggml_custom3_op_f32_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ggml_tensor,
        arg2: *const ggml_tensor,
        arg3: *const ggml_tensor,
        arg4: *const ggml_tensor,
    ),
>;
extern "C" {
    pub fn ggml_map_unary_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_unary_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_unary_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_unary_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_binary_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_binary_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_binary_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_binary_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom1_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom1_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom2_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom2_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom3_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom3_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_f32_t,
    ) -> *mut ggml_tensor;
}
pub type ggml_custom1_op_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst: *mut ggml_tensor,
        a: *const ggml_tensor,
        ith: ::std::os::raw::c_int,
        nth: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type ggml_custom2_op_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst: *mut ggml_tensor,
        a: *const ggml_tensor,
        b: *const ggml_tensor,
        ith: ::std::os::raw::c_int,
        nth: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type ggml_custom3_op_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst: *mut ggml_tensor,
        a: *const ggml_tensor,
        b: *const ggml_tensor,
        c: *const ggml_tensor,
        ith: ::std::os::raw::c_int,
        nth: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn ggml_map_custom1(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom1_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom2(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom2_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom3(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom3_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cross_entropy_loss(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cross_entropy_loss_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_opt_step_adamw(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        grad: *mut ggml_tensor,
        alpha: f32,
        beta1: f32,
        beta2: f32,
        eps: f32,
        wd: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_param(ctx: *mut ggml_context, tensor: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_set_loss(tensor: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_build_forward_expand(cgraph: *mut ggml_cgraph, tensor: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_build_backward_expand(
        ctx: *mut ggml_context,
        gf: *mut ggml_cgraph,
        gb: *mut ggml_cgraph,
        accumulate: bool,
    );
}
extern "C" {
    pub fn ggml_build_opt_adamw(
        ctx: *mut ggml_context,
        gf: *mut ggml_cgraph,
        gb: *mut ggml_cgraph,
        alpha: f32,
        beta1: f32,
        beta2: f32,
        eps: f32,
        wd: f32,
    );
}
extern "C" {
    pub fn ggml_new_graph(ctx: *mut ggml_context) -> *mut ggml_cgraph;
}
extern "C" {
    pub fn ggml_new_graph_custom(
        ctx: *mut ggml_context,
        size: usize,
        grads: bool,
    ) -> *mut ggml_cgraph;
}
extern "C" {
    pub fn ggml_graph_dup(ctx: *mut ggml_context, cgraph: *mut ggml_cgraph) -> *mut ggml_cgraph;
}
extern "C" {
    pub fn ggml_graph_cpy(src: *mut ggml_cgraph, dst: *mut ggml_cgraph);
}
extern "C" {
    pub fn ggml_graph_reset(cgraph: *mut ggml_cgraph);
}
extern "C" {
    pub fn ggml_graph_clear(cgraph: *mut ggml_cgraph);
}
extern "C" {
    pub fn ggml_graph_size(cgraph: *mut ggml_cgraph) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_graph_node(cgraph: *mut ggml_cgraph, i: ::std::os::raw::c_int) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_graph_nodes(cgraph: *mut ggml_cgraph) -> *mut *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_graph_n_nodes(cgraph: *mut ggml_cgraph) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_graph_add_node(cgraph: *mut ggml_cgraph, tensor: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_graph_overhead() -> usize;
}
extern "C" {
    pub fn ggml_graph_overhead_custom(size: usize, grads: bool) -> usize;
}
extern "C" {
    pub fn ggml_threadpool_params_default(
        n_threads: ::std::os::raw::c_int,
    ) -> ggml_threadpool_params;
}
extern "C" {
    pub fn ggml_threadpool_params_init(
        p: *mut ggml_threadpool_params,
        n_threads: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ggml_threadpool_params_match(
        p0: *const ggml_threadpool_params,
        p1: *const ggml_threadpool_params,
    ) -> bool;
}
extern "C" {
    pub fn ggml_threadpool_new(params: *mut ggml_threadpool_params) -> *mut ggml_threadpool;
}
extern "C" {
    pub fn ggml_threadpool_free(threadpool: *mut ggml_threadpool);
}
extern "C" {
    pub fn ggml_threadpool_get_n_threads(threadpool: *mut ggml_threadpool)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_threadpool_pause(threadpool: *mut ggml_threadpool);
}
extern "C" {
    pub fn ggml_threadpool_resume(threadpool: *mut ggml_threadpool);
}
extern "C" {
    pub fn ggml_graph_plan(
        cgraph: *const ggml_cgraph,
        n_threads: ::std::os::raw::c_int,
        threadpool: *mut ggml_threadpool,
    ) -> ggml_cplan;
}
extern "C" {
    pub fn ggml_graph_compute(cgraph: *mut ggml_cgraph, cplan: *mut ggml_cplan) -> ggml_status;
}
extern "C" {
    pub fn ggml_graph_compute_with_ctx(
        ctx: *mut ggml_context,
        cgraph: *mut ggml_cgraph,
        n_threads: ::std::os::raw::c_int,
    ) -> ggml_status;
}
extern "C" {
    pub fn ggml_graph_get_tensor(
        cgraph: *mut ggml_cgraph,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_graph_export(cgraph: *const ggml_cgraph, fname: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ggml_graph_import(
        fname: *const ::std::os::raw::c_char,
        ctx_data: *mut *mut ggml_context,
        ctx_eval: *mut *mut ggml_context,
    ) -> *mut ggml_cgraph;
}
extern "C" {
    pub fn ggml_graph_print(cgraph: *const ggml_cgraph);
}
extern "C" {
    pub fn ggml_graph_dump_dot(
        gb: *const ggml_cgraph,
        gf: *const ggml_cgraph,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ggml_build_backward_gradient_checkpointing(
        ctx: *mut ggml_context,
        gf: *mut ggml_cgraph,
        gb: *mut ggml_cgraph,
        gb_tmp: *mut ggml_cgraph,
        checkpoints: *mut *mut ggml_tensor,
        n_checkpoints: ::std::os::raw::c_int,
    );
}
pub const ggml_opt_type_GGML_OPT_TYPE_ADAM: ggml_opt_type = 0;
pub const ggml_opt_type_GGML_OPT_TYPE_LBFGS: ggml_opt_type = 1;
pub type ggml_opt_type = ::std::os::raw::c_int;
pub const ggml_linesearch_GGML_LINESEARCH_DEFAULT: ggml_linesearch = 1;
pub const ggml_linesearch_GGML_LINESEARCH_BACKTRACKING_ARMIJO: ggml_linesearch = 0;
pub const ggml_linesearch_GGML_LINESEARCH_BACKTRACKING_WOLFE: ggml_linesearch = 1;
pub const ggml_linesearch_GGML_LINESEARCH_BACKTRACKING_STRONG_WOLFE: ggml_linesearch = 2;
pub type ggml_linesearch = ::std::os::raw::c_int;
pub const ggml_opt_result_GGML_OPT_RESULT_OK: ggml_opt_result = 0;
pub const ggml_opt_result_GGML_OPT_RESULT_DID_NOT_CONVERGE: ggml_opt_result = 1;
pub const ggml_opt_result_GGML_OPT_RESULT_NO_CONTEXT: ggml_opt_result = 2;
pub const ggml_opt_result_GGML_OPT_RESULT_INVALID_WOLFE: ggml_opt_result = 3;
pub const ggml_opt_result_GGML_OPT_RESULT_FAIL: ggml_opt_result = 4;
pub const ggml_opt_result_GGML_OPT_RESULT_CANCEL: ggml_opt_result = 5;
pub const ggml_opt_result_GGML_LINESEARCH_FAIL: ggml_opt_result = -128;
pub const ggml_opt_result_GGML_LINESEARCH_MINIMUM_STEP: ggml_opt_result = -127;
pub const ggml_opt_result_GGML_LINESEARCH_MAXIMUM_STEP: ggml_opt_result = -126;
pub const ggml_opt_result_GGML_LINESEARCH_MAXIMUM_ITERATIONS: ggml_opt_result = -125;
pub const ggml_opt_result_GGML_LINESEARCH_INVALID_PARAMETERS: ggml_opt_result = -124;
pub type ggml_opt_result = ::std::os::raw::c_int;
pub type ggml_opt_callback = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        accum_step: ::std::os::raw::c_int,
        sched: *mut f32,
        cancel: *mut bool,
    ),
>;
pub type ggml_log_callback = ::std::option::Option<
    unsafe extern "C" fn(
        level: ggml_log_level,
        text: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn ggml_log_set(log_callback: ggml_log_callback, user_data: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_opt_params {
    pub type_: ggml_opt_type,
    pub graph_size: usize,
    pub n_threads: ::std::os::raw::c_int,
    pub past: ::std::os::raw::c_int,
    pub delta: f32,
    pub max_no_improvement: ::std::os::raw::c_int,
    pub print_forward_graph: bool,
    pub print_backward_graph: bool,
    pub n_gradient_accumulation: ::std::os::raw::c_int,
    pub adam: ggml_opt_params__bindgen_ty_1,
    pub lbfgs: ggml_opt_params__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_opt_params__bindgen_ty_1 {
    pub n_iter: ::std::os::raw::c_int,
    pub sched: f32,
    pub decay: f32,
    pub decay_min_ndim: ::std::os::raw::c_int,
    pub alpha: f32,
    pub beta1: f32,
    pub beta2: f32,
    pub eps: f32,
    pub eps_f: f32,
    pub eps_g: f32,
    pub gclip: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_opt_params__bindgen_ty_1"]
        [::std::mem::size_of::<ggml_opt_params__bindgen_ty_1>() - 44usize];
    ["Alignment of ggml_opt_params__bindgen_ty_1"]
        [::std::mem::align_of::<ggml_opt_params__bindgen_ty_1>() - 4usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_1::n_iter"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_1, n_iter) - 0usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_1::sched"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_1, sched) - 4usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_1::decay"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_1, decay) - 8usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_1::decay_min_ndim"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_1, decay_min_ndim) - 12usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_1::alpha"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_1, alpha) - 16usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_1::beta1"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_1, beta1) - 20usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_1::beta2"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_1, beta2) - 24usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_1::eps"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_1, eps) - 28usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_1::eps_f"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_1, eps_f) - 32usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_1::eps_g"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_1, eps_g) - 36usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_1::gclip"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_1, gclip) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_opt_params__bindgen_ty_2 {
    pub m: ::std::os::raw::c_int,
    pub n_iter: ::std::os::raw::c_int,
    pub max_linesearch: ::std::os::raw::c_int,
    pub eps: f32,
    pub ftol: f32,
    pub wolfe: f32,
    pub min_step: f32,
    pub max_step: f32,
    pub linesearch: ggml_linesearch,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_opt_params__bindgen_ty_2"]
        [::std::mem::size_of::<ggml_opt_params__bindgen_ty_2>() - 36usize];
    ["Alignment of ggml_opt_params__bindgen_ty_2"]
        [::std::mem::align_of::<ggml_opt_params__bindgen_ty_2>() - 4usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_2::m"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_2, m) - 0usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_2::n_iter"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_2, n_iter) - 4usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_2::max_linesearch"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_2, max_linesearch) - 8usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_2::eps"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_2, eps) - 12usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_2::ftol"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_2, ftol) - 16usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_2::wolfe"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_2, wolfe) - 20usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_2::min_step"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_2, min_step) - 24usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_2::max_step"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_2, max_step) - 28usize];
    ["Offset of field: ggml_opt_params__bindgen_ty_2::linesearch"]
        [::std::mem::offset_of!(ggml_opt_params__bindgen_ty_2, linesearch) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_opt_params"][::std::mem::size_of::<ggml_opt_params>() - 120usize];
    ["Alignment of ggml_opt_params"][::std::mem::align_of::<ggml_opt_params>() - 8usize];
    ["Offset of field: ggml_opt_params::type_"]
        [::std::mem::offset_of!(ggml_opt_params, type_) - 0usize];
    ["Offset of field: ggml_opt_params::graph_size"]
        [::std::mem::offset_of!(ggml_opt_params, graph_size) - 8usize];
    ["Offset of field: ggml_opt_params::n_threads"]
        [::std::mem::offset_of!(ggml_opt_params, n_threads) - 16usize];
    ["Offset of field: ggml_opt_params::past"]
        [::std::mem::offset_of!(ggml_opt_params, past) - 20usize];
    ["Offset of field: ggml_opt_params::delta"]
        [::std::mem::offset_of!(ggml_opt_params, delta) - 24usize];
    ["Offset of field: ggml_opt_params::max_no_improvement"]
        [::std::mem::offset_of!(ggml_opt_params, max_no_improvement) - 28usize];
    ["Offset of field: ggml_opt_params::print_forward_graph"]
        [::std::mem::offset_of!(ggml_opt_params, print_forward_graph) - 32usize];
    ["Offset of field: ggml_opt_params::print_backward_graph"]
        [::std::mem::offset_of!(ggml_opt_params, print_backward_graph) - 33usize];
    ["Offset of field: ggml_opt_params::n_gradient_accumulation"]
        [::std::mem::offset_of!(ggml_opt_params, n_gradient_accumulation) - 36usize];
    ["Offset of field: ggml_opt_params::adam"]
        [::std::mem::offset_of!(ggml_opt_params, adam) - 40usize];
    ["Offset of field: ggml_opt_params::lbfgs"]
        [::std::mem::offset_of!(ggml_opt_params, lbfgs) - 84usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_opt_context {
    pub ctx: *mut ggml_context,
    pub params: ggml_opt_params,
    pub iter: ::std::os::raw::c_int,
    pub nx: i64,
    pub just_initialized: bool,
    pub loss_before: f32,
    pub loss_after: f32,
    pub adam: ggml_opt_context__bindgen_ty_1,
    pub lbfgs: ggml_opt_context__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_opt_context__bindgen_ty_1 {
    pub g: *mut ggml_tensor,
    pub m: *mut ggml_tensor,
    pub v: *mut ggml_tensor,
    pub pf: *mut ggml_tensor,
    pub fx_best: f32,
    pub fx_prev: f32,
    pub n_no_improvement: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_opt_context__bindgen_ty_1"]
        [::std::mem::size_of::<ggml_opt_context__bindgen_ty_1>() - 48usize];
    ["Alignment of ggml_opt_context__bindgen_ty_1"]
        [::std::mem::align_of::<ggml_opt_context__bindgen_ty_1>() - 8usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_1::g"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_1, g) - 0usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_1::m"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_1, m) - 8usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_1::v"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_1, v) - 16usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_1::pf"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_1, pf) - 24usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_1::fx_best"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_1, fx_best) - 32usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_1::fx_prev"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_1, fx_prev) - 36usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_1::n_no_improvement"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_1, n_no_improvement) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_opt_context__bindgen_ty_2 {
    pub x: *mut ggml_tensor,
    pub xp: *mut ggml_tensor,
    pub g: *mut ggml_tensor,
    pub gp: *mut ggml_tensor,
    pub d: *mut ggml_tensor,
    pub pf: *mut ggml_tensor,
    pub lmal: *mut ggml_tensor,
    pub lmys: *mut ggml_tensor,
    pub lms: *mut ggml_tensor,
    pub lmy: *mut ggml_tensor,
    pub fx_best: f32,
    pub step: f32,
    pub j: ::std::os::raw::c_int,
    pub k: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
    pub n_no_improvement: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_opt_context__bindgen_ty_2"]
        [::std::mem::size_of::<ggml_opt_context__bindgen_ty_2>() - 104usize];
    ["Alignment of ggml_opt_context__bindgen_ty_2"]
        [::std::mem::align_of::<ggml_opt_context__bindgen_ty_2>() - 8usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::x"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, x) - 0usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::xp"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, xp) - 8usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::g"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, g) - 16usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::gp"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, gp) - 24usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::d"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, d) - 32usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::pf"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, pf) - 40usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::lmal"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, lmal) - 48usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::lmys"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, lmys) - 56usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::lms"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, lms) - 64usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::lmy"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, lmy) - 72usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::fx_best"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, fx_best) - 80usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::step"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, step) - 84usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::j"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, j) - 88usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::k"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, k) - 92usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::end"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, end) - 96usize];
    ["Offset of field: ggml_opt_context__bindgen_ty_2::n_no_improvement"]
        [::std::mem::offset_of!(ggml_opt_context__bindgen_ty_2, n_no_improvement) - 100usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_opt_context"][::std::mem::size_of::<ggml_opt_context>() - 312usize];
    ["Alignment of ggml_opt_context"][::std::mem::align_of::<ggml_opt_context>() - 8usize];
    ["Offset of field: ggml_opt_context::ctx"]
        [::std::mem::offset_of!(ggml_opt_context, ctx) - 0usize];
    ["Offset of field: ggml_opt_context::params"]
        [::std::mem::offset_of!(ggml_opt_context, params) - 8usize];
    ["Offset of field: ggml_opt_context::iter"]
        [::std::mem::offset_of!(ggml_opt_context, iter) - 128usize];
    ["Offset of field: ggml_opt_context::nx"]
        [::std::mem::offset_of!(ggml_opt_context, nx) - 136usize];
    ["Offset of field: ggml_opt_context::just_initialized"]
        [::std::mem::offset_of!(ggml_opt_context, just_initialized) - 144usize];
    ["Offset of field: ggml_opt_context::loss_before"]
        [::std::mem::offset_of!(ggml_opt_context, loss_before) - 148usize];
    ["Offset of field: ggml_opt_context::loss_after"]
        [::std::mem::offset_of!(ggml_opt_context, loss_after) - 152usize];
    ["Offset of field: ggml_opt_context::adam"]
        [::std::mem::offset_of!(ggml_opt_context, adam) - 160usize];
    ["Offset of field: ggml_opt_context::lbfgs"]
        [::std::mem::offset_of!(ggml_opt_context, lbfgs) - 208usize];
};
extern "C" {
    pub fn ggml_opt_default_params(type_: ggml_opt_type) -> ggml_opt_params;
}
extern "C" {
    pub fn ggml_opt(
        ctx: *mut ggml_context,
        params: ggml_opt_params,
        f: *mut ggml_tensor,
    ) -> ggml_opt_result;
}
extern "C" {
    pub fn ggml_opt_init(
        ctx: *mut ggml_context,
        opt: *mut ggml_opt_context,
        params: ggml_opt_params,
        nx: i64,
    );
}
extern "C" {
    pub fn ggml_opt_resume(
        ctx: *mut ggml_context,
        opt: *mut ggml_opt_context,
        f: *mut ggml_tensor,
    ) -> ggml_opt_result;
}
extern "C" {
    pub fn ggml_opt_resume_g(
        ctx: *mut ggml_context,
        opt: *mut ggml_opt_context,
        f: *mut ggml_tensor,
        gf: *mut ggml_cgraph,
        gb: *mut ggml_cgraph,
        callback: ggml_opt_callback,
        callback_data: *mut ::std::os::raw::c_void,
    ) -> ggml_opt_result;
}
extern "C" {
    pub fn ggml_set_input(tensor: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_set_output(tensor: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_quantize_init(type_: ggml_type);
}
extern "C" {
    pub fn ggml_quantize_free();
}
extern "C" {
    pub fn ggml_quantize_requires_imatrix(type_: ggml_type) -> bool;
}
extern "C" {
    pub fn ggml_quantize_chunk(
        type_: ggml_type,
        src: *const f32,
        dst: *mut ::std::os::raw::c_void,
        start: i64,
        nrows: i64,
        n_per_row: i64,
        imatrix: *const f32,
    ) -> usize;
}
pub const gguf_type_GGUF_TYPE_UINT8: gguf_type = 0;
pub const gguf_type_GGUF_TYPE_INT8: gguf_type = 1;
pub const gguf_type_GGUF_TYPE_UINT16: gguf_type = 2;
pub const gguf_type_GGUF_TYPE_INT16: gguf_type = 3;
pub const gguf_type_GGUF_TYPE_UINT32: gguf_type = 4;
pub const gguf_type_GGUF_TYPE_INT32: gguf_type = 5;
pub const gguf_type_GGUF_TYPE_FLOAT32: gguf_type = 6;
pub const gguf_type_GGUF_TYPE_BOOL: gguf_type = 7;
pub const gguf_type_GGUF_TYPE_STRING: gguf_type = 8;
pub const gguf_type_GGUF_TYPE_ARRAY: gguf_type = 9;
pub const gguf_type_GGUF_TYPE_UINT64: gguf_type = 10;
pub const gguf_type_GGUF_TYPE_INT64: gguf_type = 11;
pub const gguf_type_GGUF_TYPE_FLOAT64: gguf_type = 12;
pub const gguf_type_GGUF_TYPE_COUNT: gguf_type = 13;
pub type gguf_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gguf_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gguf_init_params {
    pub no_alloc: bool,
    pub ctx: *mut *mut ggml_context,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gguf_init_params"][::std::mem::size_of::<gguf_init_params>() - 16usize];
    ["Alignment of gguf_init_params"][::std::mem::align_of::<gguf_init_params>() - 8usize];
    ["Offset of field: gguf_init_params::no_alloc"]
        [::std::mem::offset_of!(gguf_init_params, no_alloc) - 0usize];
    ["Offset of field: gguf_init_params::ctx"]
        [::std::mem::offset_of!(gguf_init_params, ctx) - 8usize];
};
extern "C" {
    pub fn gguf_init_empty() -> *mut gguf_context;
}
extern "C" {
    pub fn gguf_init_from_file(
        fname: *const ::std::os::raw::c_char,
        params: gguf_init_params,
    ) -> *mut gguf_context;
}
extern "C" {
    pub fn gguf_free(ctx: *mut gguf_context);
}
extern "C" {
    pub fn gguf_type_name(type_: gguf_type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gguf_get_version(ctx: *const gguf_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gguf_get_alignment(ctx: *const gguf_context) -> usize;
}
extern "C" {
    pub fn gguf_get_data_offset(ctx: *const gguf_context) -> usize;
}
extern "C" {
    pub fn gguf_get_data(ctx: *const gguf_context) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn gguf_get_n_kv(ctx: *const gguf_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gguf_find_key(
        ctx: *const gguf_context,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gguf_get_key(
        ctx: *const gguf_context,
        key_id: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gguf_get_kv_type(ctx: *const gguf_context, key_id: ::std::os::raw::c_int) -> gguf_type;
}
extern "C" {
    pub fn gguf_get_arr_type(ctx: *const gguf_context, key_id: ::std::os::raw::c_int) -> gguf_type;
}
extern "C" {
    pub fn gguf_get_val_u8(ctx: *const gguf_context, key_id: ::std::os::raw::c_int) -> u8;
}
extern "C" {
    pub fn gguf_get_val_i8(ctx: *const gguf_context, key_id: ::std::os::raw::c_int) -> i8;
}
extern "C" {
    pub fn gguf_get_val_u16(ctx: *const gguf_context, key_id: ::std::os::raw::c_int) -> u16;
}
extern "C" {
    pub fn gguf_get_val_i16(ctx: *const gguf_context, key_id: ::std::os::raw::c_int) -> i16;
}
extern "C" {
    pub fn gguf_get_val_u32(ctx: *const gguf_context, key_id: ::std::os::raw::c_int) -> u32;
}
extern "C" {
    pub fn gguf_get_val_i32(ctx: *const gguf_context, key_id: ::std::os::raw::c_int) -> i32;
}
extern "C" {
    pub fn gguf_get_val_f32(ctx: *const gguf_context, key_id: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn gguf_get_val_u64(ctx: *const gguf_context, key_id: ::std::os::raw::c_int) -> u64;
}
extern "C" {
    pub fn gguf_get_val_i64(ctx: *const gguf_context, key_id: ::std::os::raw::c_int) -> i64;
}
extern "C" {
    pub fn gguf_get_val_f64(ctx: *const gguf_context, key_id: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn gguf_get_val_bool(ctx: *const gguf_context, key_id: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn gguf_get_val_str(
        ctx: *const gguf_context,
        key_id: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gguf_get_val_data(
        ctx: *const gguf_context,
        key_id: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn gguf_get_arr_n(
        ctx: *const gguf_context,
        key_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gguf_get_arr_data(
        ctx: *const gguf_context,
        key_id: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn gguf_get_arr_str(
        ctx: *const gguf_context,
        key_id: ::std::os::raw::c_int,
        i: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gguf_get_n_tensors(ctx: *const gguf_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gguf_find_tensor(
        ctx: *const gguf_context,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gguf_get_tensor_offset(ctx: *const gguf_context, i: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn gguf_get_tensor_name(
        ctx: *const gguf_context,
        i: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gguf_get_tensor_type(ctx: *const gguf_context, i: ::std::os::raw::c_int) -> ggml_type;
}
extern "C" {
    pub fn gguf_remove_key(ctx: *mut gguf_context, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn gguf_set_val_u8(ctx: *mut gguf_context, key: *const ::std::os::raw::c_char, val: u8);
}
extern "C" {
    pub fn gguf_set_val_i8(ctx: *mut gguf_context, key: *const ::std::os::raw::c_char, val: i8);
}
extern "C" {
    pub fn gguf_set_val_u16(ctx: *mut gguf_context, key: *const ::std::os::raw::c_char, val: u16);
}
extern "C" {
    pub fn gguf_set_val_i16(ctx: *mut gguf_context, key: *const ::std::os::raw::c_char, val: i16);
}
extern "C" {
    pub fn gguf_set_val_u32(ctx: *mut gguf_context, key: *const ::std::os::raw::c_char, val: u32);
}
extern "C" {
    pub fn gguf_set_val_i32(ctx: *mut gguf_context, key: *const ::std::os::raw::c_char, val: i32);
}
extern "C" {
    pub fn gguf_set_val_f32(ctx: *mut gguf_context, key: *const ::std::os::raw::c_char, val: f32);
}
extern "C" {
    pub fn gguf_set_val_u64(ctx: *mut gguf_context, key: *const ::std::os::raw::c_char, val: u64);
}
extern "C" {
    pub fn gguf_set_val_i64(ctx: *mut gguf_context, key: *const ::std::os::raw::c_char, val: i64);
}
extern "C" {
    pub fn gguf_set_val_f64(ctx: *mut gguf_context, key: *const ::std::os::raw::c_char, val: f64);
}
extern "C" {
    pub fn gguf_set_val_bool(ctx: *mut gguf_context, key: *const ::std::os::raw::c_char, val: bool);
}
extern "C" {
    pub fn gguf_set_val_str(
        ctx: *mut gguf_context,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn gguf_set_arr_data(
        ctx: *mut gguf_context,
        key: *const ::std::os::raw::c_char,
        type_: gguf_type,
        data: *const ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gguf_set_arr_str(
        ctx: *mut gguf_context,
        key: *const ::std::os::raw::c_char,
        data: *mut *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gguf_set_kv(ctx: *mut gguf_context, src: *mut gguf_context);
}
extern "C" {
    pub fn gguf_add_tensor(ctx: *mut gguf_context, tensor: *const ggml_tensor);
}
extern "C" {
    pub fn gguf_set_tensor_type(
        ctx: *mut gguf_context,
        name: *const ::std::os::raw::c_char,
        type_: ggml_type,
    );
}
extern "C" {
    pub fn gguf_set_tensor_data(
        ctx: *mut gguf_context,
        name: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        size: usize,
    );
}
extern "C" {
    pub fn gguf_write_to_file(
        ctx: *const gguf_context,
        fname: *const ::std::os::raw::c_char,
        only_meta: bool,
    );
}
extern "C" {
    pub fn gguf_get_meta_size(ctx: *const gguf_context) -> usize;
}
extern "C" {
    pub fn gguf_get_meta_data(ctx: *const gguf_context, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ggml_cpu_has_avx() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_avx_vnni() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_avx2() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_avx512() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_avx512_vbmi() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_avx512_vnni() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_avx512_bf16() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_fma() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_neon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_sve() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_arm_fma() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_metal() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_f16c() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_fp16_va() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_wasm_simd() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_blas() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_cuda() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_vulkan() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_kompute() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_gpublas() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_sse3() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_ssse3() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_riscv_v() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_sycl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_rpc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_vsx() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_matmul_int8() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_cann() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_llamafile() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_get_sve_cnt() -> ::std::os::raw::c_int;
}
pub type ggml_to_float_t = ::std::option::Option<
    unsafe extern "C" fn(x: *const ::std::os::raw::c_void, y: *mut f32, k: i64),
>;
pub type ggml_from_float_t = ::std::option::Option<
    unsafe extern "C" fn(x: *const f32, y: *mut ::std::os::raw::c_void, k: i64),
>;
pub type ggml_from_float_to_mat_t = ::std::option::Option<
    unsafe extern "C" fn(x: *const f32, y: *mut ::std::os::raw::c_void, nr: i64, k: i64, bs: i64),
>;
pub type ggml_vec_dot_t = ::std::option::Option<
    unsafe extern "C" fn(
        n: ::std::os::raw::c_int,
        s: *mut f32,
        bs: usize,
        x: *const ::std::os::raw::c_void,
        bx: usize,
        y: *const ::std::os::raw::c_void,
        by: usize,
        nrc: ::std::os::raw::c_int,
    ),
>;
pub type ggml_gemv_t = ::std::option::Option<
    unsafe extern "C" fn(
        n: ::std::os::raw::c_int,
        s: *mut f32,
        bs: usize,
        x: *const ::std::os::raw::c_void,
        y: *const ::std::os::raw::c_void,
        nr: ::std::os::raw::c_int,
        nc: ::std::os::raw::c_int,
    ),
>;
pub type ggml_gemm_t = ::std::option::Option<
    unsafe extern "C" fn(
        n: ::std::os::raw::c_int,
        s: *mut f32,
        bs: usize,
        x: *const ::std::os::raw::c_void,
        y: *const ::std::os::raw::c_void,
        nr: ::std::os::raw::c_int,
        nc: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_type_traits_t {
    pub type_name: *const ::std::os::raw::c_char,
    pub blck_size: i64,
    pub blck_size_interleave: i64,
    pub type_size: usize,
    pub is_quantized: bool,
    pub to_float: ggml_to_float_t,
    pub from_float: ggml_from_float_t,
    pub from_float_ref: ggml_from_float_t,
    pub from_float_to_mat: ggml_from_float_to_mat_t,
    pub vec_dot: ggml_vec_dot_t,
    pub vec_dot_type: ggml_type,
    pub nrows: i64,
    pub ncols: i64,
    pub gemv: ggml_gemv_t,
    pub gemm: ggml_gemm_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_type_traits_t"][::std::mem::size_of::<ggml_type_traits_t>() - 120usize];
    ["Alignment of ggml_type_traits_t"][::std::mem::align_of::<ggml_type_traits_t>() - 8usize];
    ["Offset of field: ggml_type_traits_t::type_name"]
        [::std::mem::offset_of!(ggml_type_traits_t, type_name) - 0usize];
    ["Offset of field: ggml_type_traits_t::blck_size"]
        [::std::mem::offset_of!(ggml_type_traits_t, blck_size) - 8usize];
    ["Offset of field: ggml_type_traits_t::blck_size_interleave"]
        [::std::mem::offset_of!(ggml_type_traits_t, blck_size_interleave) - 16usize];
    ["Offset of field: ggml_type_traits_t::type_size"]
        [::std::mem::offset_of!(ggml_type_traits_t, type_size) - 24usize];
    ["Offset of field: ggml_type_traits_t::is_quantized"]
        [::std::mem::offset_of!(ggml_type_traits_t, is_quantized) - 32usize];
    ["Offset of field: ggml_type_traits_t::to_float"]
        [::std::mem::offset_of!(ggml_type_traits_t, to_float) - 40usize];
    ["Offset of field: ggml_type_traits_t::from_float"]
        [::std::mem::offset_of!(ggml_type_traits_t, from_float) - 48usize];
    ["Offset of field: ggml_type_traits_t::from_float_ref"]
        [::std::mem::offset_of!(ggml_type_traits_t, from_float_ref) - 56usize];
    ["Offset of field: ggml_type_traits_t::from_float_to_mat"]
        [::std::mem::offset_of!(ggml_type_traits_t, from_float_to_mat) - 64usize];
    ["Offset of field: ggml_type_traits_t::vec_dot"]
        [::std::mem::offset_of!(ggml_type_traits_t, vec_dot) - 72usize];
    ["Offset of field: ggml_type_traits_t::vec_dot_type"]
        [::std::mem::offset_of!(ggml_type_traits_t, vec_dot_type) - 80usize];
    ["Offset of field: ggml_type_traits_t::nrows"]
        [::std::mem::offset_of!(ggml_type_traits_t, nrows) - 88usize];
    ["Offset of field: ggml_type_traits_t::ncols"]
        [::std::mem::offset_of!(ggml_type_traits_t, ncols) - 96usize];
    ["Offset of field: ggml_type_traits_t::gemv"]
        [::std::mem::offset_of!(ggml_type_traits_t, gemv) - 104usize];
    ["Offset of field: ggml_type_traits_t::gemm"]
        [::std::mem::offset_of!(ggml_type_traits_t, gemm) - 112usize];
};
extern "C" {
    pub fn ggml_internal_get_type_traits(type_: ggml_type) -> ggml_type_traits_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_state {
    _unused: [u8; 0],
}
pub type whisper_pos = i32;
pub type whisper_token = i32;
pub type whisper_seq_id = i32;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_NONE: whisper_alignment_heads_preset = 0;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_N_TOP_MOST: whisper_alignment_heads_preset =
    1;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_CUSTOM: whisper_alignment_heads_preset = 2;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_TINY_EN: whisper_alignment_heads_preset = 3;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_TINY: whisper_alignment_heads_preset = 4;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_BASE_EN: whisper_alignment_heads_preset = 5;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_BASE: whisper_alignment_heads_preset = 6;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_SMALL_EN: whisper_alignment_heads_preset =
    7;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_SMALL: whisper_alignment_heads_preset = 8;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_MEDIUM_EN: whisper_alignment_heads_preset =
    9;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_MEDIUM: whisper_alignment_heads_preset = 10;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_LARGE_V1: whisper_alignment_heads_preset =
    11;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_LARGE_V2: whisper_alignment_heads_preset =
    12;
pub const whisper_alignment_heads_preset_WHISPER_AHEADS_LARGE_V3: whisper_alignment_heads_preset =
    13;
pub type whisper_alignment_heads_preset = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_ahead {
    pub n_text_layer: ::std::os::raw::c_int,
    pub n_head: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of whisper_ahead"][::std::mem::size_of::<whisper_ahead>() - 8usize];
    ["Alignment of whisper_ahead"][::std::mem::align_of::<whisper_ahead>() - 4usize];
    ["Offset of field: whisper_ahead::n_text_layer"]
        [::std::mem::offset_of!(whisper_ahead, n_text_layer) - 0usize];
    ["Offset of field: whisper_ahead::n_head"]
        [::std::mem::offset_of!(whisper_ahead, n_head) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_aheads {
    pub n_heads: usize,
    pub heads: *const whisper_ahead,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of whisper_aheads"][::std::mem::size_of::<whisper_aheads>() - 16usize];
    ["Alignment of whisper_aheads"][::std::mem::align_of::<whisper_aheads>() - 8usize];
    ["Offset of field: whisper_aheads::n_heads"]
        [::std::mem::offset_of!(whisper_aheads, n_heads) - 0usize];
    ["Offset of field: whisper_aheads::heads"]
        [::std::mem::offset_of!(whisper_aheads, heads) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_context_params {
    pub use_gpu: bool,
    pub flash_attn: bool,
    pub gpu_device: ::std::os::raw::c_int,
    pub dtw_token_timestamps: bool,
    pub dtw_aheads_preset: whisper_alignment_heads_preset,
    pub dtw_n_top: ::std::os::raw::c_int,
    pub dtw_aheads: whisper_aheads,
    pub dtw_mem_size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of whisper_context_params"][::std::mem::size_of::<whisper_context_params>() - 48usize];
    ["Alignment of whisper_context_params"]
        [::std::mem::align_of::<whisper_context_params>() - 8usize];
    ["Offset of field: whisper_context_params::use_gpu"]
        [::std::mem::offset_of!(whisper_context_params, use_gpu) - 0usize];
    ["Offset of field: whisper_context_params::flash_attn"]
        [::std::mem::offset_of!(whisper_context_params, flash_attn) - 1usize];
    ["Offset of field: whisper_context_params::gpu_device"]
        [::std::mem::offset_of!(whisper_context_params, gpu_device) - 4usize];
    ["Offset of field: whisper_context_params::dtw_token_timestamps"]
        [::std::mem::offset_of!(whisper_context_params, dtw_token_timestamps) - 8usize];
    ["Offset of field: whisper_context_params::dtw_aheads_preset"]
        [::std::mem::offset_of!(whisper_context_params, dtw_aheads_preset) - 12usize];
    ["Offset of field: whisper_context_params::dtw_n_top"]
        [::std::mem::offset_of!(whisper_context_params, dtw_n_top) - 16usize];
    ["Offset of field: whisper_context_params::dtw_aheads"]
        [::std::mem::offset_of!(whisper_context_params, dtw_aheads) - 24usize];
    ["Offset of field: whisper_context_params::dtw_mem_size"]
        [::std::mem::offset_of!(whisper_context_params, dtw_mem_size) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_token_data {
    pub id: whisper_token,
    pub tid: whisper_token,
    pub p: f32,
    pub plog: f32,
    pub pt: f32,
    pub ptsum: f32,
    pub t0: i64,
    pub t1: i64,
    pub t_dtw: i64,
    pub vlen: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of whisper_token_data"][::std::mem::size_of::<whisper_token_data>() - 56usize];
    ["Alignment of whisper_token_data"][::std::mem::align_of::<whisper_token_data>() - 8usize];
    ["Offset of field: whisper_token_data::id"]
        [::std::mem::offset_of!(whisper_token_data, id) - 0usize];
    ["Offset of field: whisper_token_data::tid"]
        [::std::mem::offset_of!(whisper_token_data, tid) - 4usize];
    ["Offset of field: whisper_token_data::p"]
        [::std::mem::offset_of!(whisper_token_data, p) - 8usize];
    ["Offset of field: whisper_token_data::plog"]
        [::std::mem::offset_of!(whisper_token_data, plog) - 12usize];
    ["Offset of field: whisper_token_data::pt"]
        [::std::mem::offset_of!(whisper_token_data, pt) - 16usize];
    ["Offset of field: whisper_token_data::ptsum"]
        [::std::mem::offset_of!(whisper_token_data, ptsum) - 20usize];
    ["Offset of field: whisper_token_data::t0"]
        [::std::mem::offset_of!(whisper_token_data, t0) - 24usize];
    ["Offset of field: whisper_token_data::t1"]
        [::std::mem::offset_of!(whisper_token_data, t1) - 32usize];
    ["Offset of field: whisper_token_data::t_dtw"]
        [::std::mem::offset_of!(whisper_token_data, t_dtw) - 40usize];
    ["Offset of field: whisper_token_data::vlen"]
        [::std::mem::offset_of!(whisper_token_data, vlen) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_model_loader {
    pub context: *mut ::std::os::raw::c_void,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ::std::os::raw::c_void,
            output: *mut ::std::os::raw::c_void,
            read_size: usize,
        ) -> usize,
    >,
    pub eof: ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> bool>,
    pub close: ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of whisper_model_loader"][::std::mem::size_of::<whisper_model_loader>() - 32usize];
    ["Alignment of whisper_model_loader"][::std::mem::align_of::<whisper_model_loader>() - 8usize];
    ["Offset of field: whisper_model_loader::context"]
        [::std::mem::offset_of!(whisper_model_loader, context) - 0usize];
    ["Offset of field: whisper_model_loader::read"]
        [::std::mem::offset_of!(whisper_model_loader, read) - 8usize];
    ["Offset of field: whisper_model_loader::eof"]
        [::std::mem::offset_of!(whisper_model_loader, eof) - 16usize];
    ["Offset of field: whisper_model_loader::close"]
        [::std::mem::offset_of!(whisper_model_loader, close) - 24usize];
};
pub const whisper_gretype_WHISPER_GRETYPE_END: whisper_gretype = 0;
pub const whisper_gretype_WHISPER_GRETYPE_ALT: whisper_gretype = 1;
pub const whisper_gretype_WHISPER_GRETYPE_RULE_REF: whisper_gretype = 2;
pub const whisper_gretype_WHISPER_GRETYPE_CHAR: whisper_gretype = 3;
pub const whisper_gretype_WHISPER_GRETYPE_CHAR_NOT: whisper_gretype = 4;
pub const whisper_gretype_WHISPER_GRETYPE_CHAR_RNG_UPPER: whisper_gretype = 5;
pub const whisper_gretype_WHISPER_GRETYPE_CHAR_ALT: whisper_gretype = 6;
pub type whisper_gretype = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_grammar_element {
    pub type_: whisper_gretype,
    pub value: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of whisper_grammar_element"][::std::mem::size_of::<whisper_grammar_element>() - 8usize];
    ["Alignment of whisper_grammar_element"]
        [::std::mem::align_of::<whisper_grammar_element>() - 4usize];
    ["Offset of field: whisper_grammar_element::type_"]
        [::std::mem::offset_of!(whisper_grammar_element, type_) - 0usize];
    ["Offset of field: whisper_grammar_element::value"]
        [::std::mem::offset_of!(whisper_grammar_element, value) - 4usize];
};
extern "C" {
    pub fn whisper_init_from_file_with_params(
        path_model: *const ::std::os::raw::c_char,
        params: whisper_context_params,
    ) -> *mut whisper_context;
}
extern "C" {
    pub fn whisper_init_from_buffer_with_params(
        buffer: *mut ::std::os::raw::c_void,
        buffer_size: usize,
        params: whisper_context_params,
    ) -> *mut whisper_context;
}
extern "C" {
    pub fn whisper_init_with_params(
        loader: *mut whisper_model_loader,
        params: whisper_context_params,
    ) -> *mut whisper_context;
}
extern "C" {
    pub fn whisper_init_from_file_with_params_no_state(
        path_model: *const ::std::os::raw::c_char,
        params: whisper_context_params,
    ) -> *mut whisper_context;
}
extern "C" {
    pub fn whisper_init_from_buffer_with_params_no_state(
        buffer: *mut ::std::os::raw::c_void,
        buffer_size: usize,
        params: whisper_context_params,
    ) -> *mut whisper_context;
}
extern "C" {
    pub fn whisper_init_with_params_no_state(
        loader: *mut whisper_model_loader,
        params: whisper_context_params,
    ) -> *mut whisper_context;
}
extern "C" {
    pub fn whisper_init_from_file(
        path_model: *const ::std::os::raw::c_char,
    ) -> *mut whisper_context;
}
extern "C" {
    pub fn whisper_init_from_buffer(
        buffer: *mut ::std::os::raw::c_void,
        buffer_size: usize,
    ) -> *mut whisper_context;
}
extern "C" {
    pub fn whisper_init(loader: *mut whisper_model_loader) -> *mut whisper_context;
}
extern "C" {
    pub fn whisper_init_from_file_no_state(
        path_model: *const ::std::os::raw::c_char,
    ) -> *mut whisper_context;
}
extern "C" {
    pub fn whisper_init_from_buffer_no_state(
        buffer: *mut ::std::os::raw::c_void,
        buffer_size: usize,
    ) -> *mut whisper_context;
}
extern "C" {
    pub fn whisper_init_no_state(loader: *mut whisper_model_loader) -> *mut whisper_context;
}
extern "C" {
    pub fn whisper_init_state(ctx: *mut whisper_context) -> *mut whisper_state;
}
extern "C" {
    pub fn whisper_ctx_init_openvino_encoder(
        ctx: *mut whisper_context,
        model_path: *const ::std::os::raw::c_char,
        device: *const ::std::os::raw::c_char,
        cache_dir: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_free(ctx: *mut whisper_context);
}
extern "C" {
    pub fn whisper_free_state(state: *mut whisper_state);
}
extern "C" {
    pub fn whisper_free_params(params: *mut whisper_full_params);
}
extern "C" {
    pub fn whisper_free_context_params(params: *mut whisper_context_params);
}
extern "C" {
    pub fn whisper_pcm_to_mel(
        ctx: *mut whisper_context,
        samples: *const f32,
        n_samples: ::std::os::raw::c_int,
        n_threads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_pcm_to_mel_with_state(
        ctx: *mut whisper_context,
        state: *mut whisper_state,
        samples: *const f32,
        n_samples: ::std::os::raw::c_int,
        n_threads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_set_mel(
        ctx: *mut whisper_context,
        data: *const f32,
        n_len: ::std::os::raw::c_int,
        n_mel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_set_mel_with_state(
        ctx: *mut whisper_context,
        state: *mut whisper_state,
        data: *const f32,
        n_len: ::std::os::raw::c_int,
        n_mel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_encode(
        ctx: *mut whisper_context,
        offset: ::std::os::raw::c_int,
        n_threads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_encode_with_state(
        ctx: *mut whisper_context,
        state: *mut whisper_state,
        offset: ::std::os::raw::c_int,
        n_threads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_decode(
        ctx: *mut whisper_context,
        tokens: *const whisper_token,
        n_tokens: ::std::os::raw::c_int,
        n_past: ::std::os::raw::c_int,
        n_threads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_decode_with_state(
        ctx: *mut whisper_context,
        state: *mut whisper_state,
        tokens: *const whisper_token,
        n_tokens: ::std::os::raw::c_int,
        n_past: ::std::os::raw::c_int,
        n_threads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_tokenize(
        ctx: *mut whisper_context,
        text: *const ::std::os::raw::c_char,
        tokens: *mut whisper_token,
        n_max_tokens: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_token_count(
        ctx: *mut whisper_context,
        text: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_lang_max_id() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_lang_id(lang: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_lang_str(id: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn whisper_lang_str_full(id: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn whisper_lang_auto_detect(
        ctx: *mut whisper_context,
        offset_ms: ::std::os::raw::c_int,
        n_threads: ::std::os::raw::c_int,
        lang_probs: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_lang_auto_detect_with_state(
        ctx: *mut whisper_context,
        state: *mut whisper_state,
        offset_ms: ::std::os::raw::c_int,
        n_threads: ::std::os::raw::c_int,
        lang_probs: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_n_len(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_n_len_from_state(state: *mut whisper_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_n_vocab(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_n_text_ctx(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_n_audio_ctx(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_is_multilingual(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_model_n_vocab(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_model_n_audio_ctx(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_model_n_audio_state(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_model_n_audio_head(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_model_n_audio_layer(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_model_n_text_ctx(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_model_n_text_state(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_model_n_text_head(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_model_n_text_layer(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_model_n_mels(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_model_ftype(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_model_type(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_get_logits(ctx: *mut whisper_context) -> *mut f32;
}
extern "C" {
    pub fn whisper_get_logits_from_state(state: *mut whisper_state) -> *mut f32;
}
extern "C" {
    pub fn whisper_token_to_str(
        ctx: *mut whisper_context,
        token: whisper_token,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn whisper_model_type_readable(ctx: *mut whisper_context) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn whisper_token_eot(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_sot(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_solm(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_prev(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_nosp(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_not(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_beg(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_lang(
        ctx: *mut whisper_context,
        lang_id: ::std::os::raw::c_int,
    ) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_translate(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_transcribe(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_print_timings(ctx: *mut whisper_context);
}
extern "C" {
    pub fn whisper_reset_timings(ctx: *mut whisper_context);
}
extern "C" {
    pub fn whisper_print_system_info() -> *const ::std::os::raw::c_char;
}
pub const whisper_sampling_strategy_WHISPER_SAMPLING_GREEDY: whisper_sampling_strategy = 0;
pub const whisper_sampling_strategy_WHISPER_SAMPLING_BEAM_SEARCH: whisper_sampling_strategy = 1;
pub type whisper_sampling_strategy = ::std::os::raw::c_int;
pub type whisper_new_segment_callback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut whisper_context,
        state: *mut whisper_state,
        n_new: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type whisper_progress_callback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut whisper_context,
        state: *mut whisper_state,
        progress: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type whisper_encoder_begin_callback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut whisper_context,
        state: *mut whisper_state,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
pub type whisper_logits_filter_callback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut whisper_context,
        state: *mut whisper_state,
        tokens: *const whisper_token_data,
        n_tokens: ::std::os::raw::c_int,
        logits: *mut f32,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_full_params {
    pub strategy: whisper_sampling_strategy,
    pub n_threads: ::std::os::raw::c_int,
    pub n_max_text_ctx: ::std::os::raw::c_int,
    pub offset_ms: ::std::os::raw::c_int,
    pub duration_ms: ::std::os::raw::c_int,
    pub translate: bool,
    pub no_context: bool,
    pub no_timestamps: bool,
    pub single_segment: bool,
    pub print_special: bool,
    pub print_progress: bool,
    pub print_realtime: bool,
    pub print_timestamps: bool,
    pub token_timestamps: bool,
    pub thold_pt: f32,
    pub thold_ptsum: f32,
    pub max_len: ::std::os::raw::c_int,
    pub split_on_word: bool,
    pub max_tokens: ::std::os::raw::c_int,
    pub debug_mode: bool,
    pub audio_ctx: ::std::os::raw::c_int,
    pub tdrz_enable: bool,
    pub suppress_regex: *const ::std::os::raw::c_char,
    pub initial_prompt: *const ::std::os::raw::c_char,
    pub prompt_tokens: *const whisper_token,
    pub prompt_n_tokens: ::std::os::raw::c_int,
    pub language: *const ::std::os::raw::c_char,
    pub detect_language: bool,
    pub suppress_blank: bool,
    pub suppress_non_speech_tokens: bool,
    pub temperature: f32,
    pub max_initial_ts: f32,
    pub length_penalty: f32,
    pub temperature_inc: f32,
    pub entropy_thold: f32,
    pub logprob_thold: f32,
    pub no_speech_thold: f32,
    pub greedy: whisper_full_params__bindgen_ty_1,
    pub beam_search: whisper_full_params__bindgen_ty_2,
    pub new_segment_callback: whisper_new_segment_callback,
    pub new_segment_callback_user_data: *mut ::std::os::raw::c_void,
    pub progress_callback: whisper_progress_callback,
    pub progress_callback_user_data: *mut ::std::os::raw::c_void,
    pub encoder_begin_callback: whisper_encoder_begin_callback,
    pub encoder_begin_callback_user_data: *mut ::std::os::raw::c_void,
    pub abort_callback: ggml_abort_callback,
    pub abort_callback_user_data: *mut ::std::os::raw::c_void,
    pub logits_filter_callback: whisper_logits_filter_callback,
    pub logits_filter_callback_user_data: *mut ::std::os::raw::c_void,
    pub grammar_rules: *mut *const whisper_grammar_element,
    pub n_grammar_rules: usize,
    pub i_start_rule: usize,
    pub grammar_penalty: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_full_params__bindgen_ty_1 {
    pub best_of: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of whisper_full_params__bindgen_ty_1"]
        [::std::mem::size_of::<whisper_full_params__bindgen_ty_1>() - 4usize];
    ["Alignment of whisper_full_params__bindgen_ty_1"]
        [::std::mem::align_of::<whisper_full_params__bindgen_ty_1>() - 4usize];
    ["Offset of field: whisper_full_params__bindgen_ty_1::best_of"]
        [::std::mem::offset_of!(whisper_full_params__bindgen_ty_1, best_of) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_full_params__bindgen_ty_2 {
    pub beam_size: ::std::os::raw::c_int,
    pub patience: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of whisper_full_params__bindgen_ty_2"]
        [::std::mem::size_of::<whisper_full_params__bindgen_ty_2>() - 8usize];
    ["Alignment of whisper_full_params__bindgen_ty_2"]
        [::std::mem::align_of::<whisper_full_params__bindgen_ty_2>() - 4usize];
    ["Offset of field: whisper_full_params__bindgen_ty_2::beam_size"]
        [::std::mem::offset_of!(whisper_full_params__bindgen_ty_2, beam_size) - 0usize];
    ["Offset of field: whisper_full_params__bindgen_ty_2::patience"]
        [::std::mem::offset_of!(whisper_full_params__bindgen_ty_2, patience) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of whisper_full_params"][::std::mem::size_of::<whisper_full_params>() - 264usize];
    ["Alignment of whisper_full_params"][::std::mem::align_of::<whisper_full_params>() - 8usize];
    ["Offset of field: whisper_full_params::strategy"]
        [::std::mem::offset_of!(whisper_full_params, strategy) - 0usize];
    ["Offset of field: whisper_full_params::n_threads"]
        [::std::mem::offset_of!(whisper_full_params, n_threads) - 4usize];
    ["Offset of field: whisper_full_params::n_max_text_ctx"]
        [::std::mem::offset_of!(whisper_full_params, n_max_text_ctx) - 8usize];
    ["Offset of field: whisper_full_params::offset_ms"]
        [::std::mem::offset_of!(whisper_full_params, offset_ms) - 12usize];
    ["Offset of field: whisper_full_params::duration_ms"]
        [::std::mem::offset_of!(whisper_full_params, duration_ms) - 16usize];
    ["Offset of field: whisper_full_params::translate"]
        [::std::mem::offset_of!(whisper_full_params, translate) - 20usize];
    ["Offset of field: whisper_full_params::no_context"]
        [::std::mem::offset_of!(whisper_full_params, no_context) - 21usize];
    ["Offset of field: whisper_full_params::no_timestamps"]
        [::std::mem::offset_of!(whisper_full_params, no_timestamps) - 22usize];
    ["Offset of field: whisper_full_params::single_segment"]
        [::std::mem::offset_of!(whisper_full_params, single_segment) - 23usize];
    ["Offset of field: whisper_full_params::print_special"]
        [::std::mem::offset_of!(whisper_full_params, print_special) - 24usize];
    ["Offset of field: whisper_full_params::print_progress"]
        [::std::mem::offset_of!(whisper_full_params, print_progress) - 25usize];
    ["Offset of field: whisper_full_params::print_realtime"]
        [::std::mem::offset_of!(whisper_full_params, print_realtime) - 26usize];
    ["Offset of field: whisper_full_params::print_timestamps"]
        [::std::mem::offset_of!(whisper_full_params, print_timestamps) - 27usize];
    ["Offset of field: whisper_full_params::token_timestamps"]
        [::std::mem::offset_of!(whisper_full_params, token_timestamps) - 28usize];
    ["Offset of field: whisper_full_params::thold_pt"]
        [::std::mem::offset_of!(whisper_full_params, thold_pt) - 32usize];
    ["Offset of field: whisper_full_params::thold_ptsum"]
        [::std::mem::offset_of!(whisper_full_params, thold_ptsum) - 36usize];
    ["Offset of field: whisper_full_params::max_len"]
        [::std::mem::offset_of!(whisper_full_params, max_len) - 40usize];
    ["Offset of field: whisper_full_params::split_on_word"]
        [::std::mem::offset_of!(whisper_full_params, split_on_word) - 44usize];
    ["Offset of field: whisper_full_params::max_tokens"]
        [::std::mem::offset_of!(whisper_full_params, max_tokens) - 48usize];
    ["Offset of field: whisper_full_params::debug_mode"]
        [::std::mem::offset_of!(whisper_full_params, debug_mode) - 52usize];
    ["Offset of field: whisper_full_params::audio_ctx"]
        [::std::mem::offset_of!(whisper_full_params, audio_ctx) - 56usize];
    ["Offset of field: whisper_full_params::tdrz_enable"]
        [::std::mem::offset_of!(whisper_full_params, tdrz_enable) - 60usize];
    ["Offset of field: whisper_full_params::suppress_regex"]
        [::std::mem::offset_of!(whisper_full_params, suppress_regex) - 64usize];
    ["Offset of field: whisper_full_params::initial_prompt"]
        [::std::mem::offset_of!(whisper_full_params, initial_prompt) - 72usize];
    ["Offset of field: whisper_full_params::prompt_tokens"]
        [::std::mem::offset_of!(whisper_full_params, prompt_tokens) - 80usize];
    ["Offset of field: whisper_full_params::prompt_n_tokens"]
        [::std::mem::offset_of!(whisper_full_params, prompt_n_tokens) - 88usize];
    ["Offset of field: whisper_full_params::language"]
        [::std::mem::offset_of!(whisper_full_params, language) - 96usize];
    ["Offset of field: whisper_full_params::detect_language"]
        [::std::mem::offset_of!(whisper_full_params, detect_language) - 104usize];
    ["Offset of field: whisper_full_params::suppress_blank"]
        [::std::mem::offset_of!(whisper_full_params, suppress_blank) - 105usize];
    ["Offset of field: whisper_full_params::suppress_non_speech_tokens"]
        [::std::mem::offset_of!(whisper_full_params, suppress_non_speech_tokens) - 106usize];
    ["Offset of field: whisper_full_params::temperature"]
        [::std::mem::offset_of!(whisper_full_params, temperature) - 108usize];
    ["Offset of field: whisper_full_params::max_initial_ts"]
        [::std::mem::offset_of!(whisper_full_params, max_initial_ts) - 112usize];
    ["Offset of field: whisper_full_params::length_penalty"]
        [::std::mem::offset_of!(whisper_full_params, length_penalty) - 116usize];
    ["Offset of field: whisper_full_params::temperature_inc"]
        [::std::mem::offset_of!(whisper_full_params, temperature_inc) - 120usize];
    ["Offset of field: whisper_full_params::entropy_thold"]
        [::std::mem::offset_of!(whisper_full_params, entropy_thold) - 124usize];
    ["Offset of field: whisper_full_params::logprob_thold"]
        [::std::mem::offset_of!(whisper_full_params, logprob_thold) - 128usize];
    ["Offset of field: whisper_full_params::no_speech_thold"]
        [::std::mem::offset_of!(whisper_full_params, no_speech_thold) - 132usize];
    ["Offset of field: whisper_full_params::greedy"]
        [::std::mem::offset_of!(whisper_full_params, greedy) - 136usize];
    ["Offset of field: whisper_full_params::beam_search"]
        [::std::mem::offset_of!(whisper_full_params, beam_search) - 140usize];
    ["Offset of field: whisper_full_params::new_segment_callback"]
        [::std::mem::offset_of!(whisper_full_params, new_segment_callback) - 152usize];
    ["Offset of field: whisper_full_params::new_segment_callback_user_data"]
        [::std::mem::offset_of!(whisper_full_params, new_segment_callback_user_data) - 160usize];
    ["Offset of field: whisper_full_params::progress_callback"]
        [::std::mem::offset_of!(whisper_full_params, progress_callback) - 168usize];
    ["Offset of field: whisper_full_params::progress_callback_user_data"]
        [::std::mem::offset_of!(whisper_full_params, progress_callback_user_data) - 176usize];
    ["Offset of field: whisper_full_params::encoder_begin_callback"]
        [::std::mem::offset_of!(whisper_full_params, encoder_begin_callback) - 184usize];
    ["Offset of field: whisper_full_params::encoder_begin_callback_user_data"]
        [::std::mem::offset_of!(whisper_full_params, encoder_begin_callback_user_data) - 192usize];
    ["Offset of field: whisper_full_params::abort_callback"]
        [::std::mem::offset_of!(whisper_full_params, abort_callback) - 200usize];
    ["Offset of field: whisper_full_params::abort_callback_user_data"]
        [::std::mem::offset_of!(whisper_full_params, abort_callback_user_data) - 208usize];
    ["Offset of field: whisper_full_params::logits_filter_callback"]
        [::std::mem::offset_of!(whisper_full_params, logits_filter_callback) - 216usize];
    ["Offset of field: whisper_full_params::logits_filter_callback_user_data"]
        [::std::mem::offset_of!(whisper_full_params, logits_filter_callback_user_data) - 224usize];
    ["Offset of field: whisper_full_params::grammar_rules"]
        [::std::mem::offset_of!(whisper_full_params, grammar_rules) - 232usize];
    ["Offset of field: whisper_full_params::n_grammar_rules"]
        [::std::mem::offset_of!(whisper_full_params, n_grammar_rules) - 240usize];
    ["Offset of field: whisper_full_params::i_start_rule"]
        [::std::mem::offset_of!(whisper_full_params, i_start_rule) - 248usize];
    ["Offset of field: whisper_full_params::grammar_penalty"]
        [::std::mem::offset_of!(whisper_full_params, grammar_penalty) - 256usize];
};
extern "C" {
    pub fn whisper_context_default_params_by_ref() -> *mut whisper_context_params;
}
extern "C" {
    pub fn whisper_context_default_params() -> whisper_context_params;
}
extern "C" {
    pub fn whisper_full_default_params_by_ref(
        strategy: whisper_sampling_strategy,
    ) -> *mut whisper_full_params;
}
extern "C" {
    pub fn whisper_full_default_params(strategy: whisper_sampling_strategy) -> whisper_full_params;
}
extern "C" {
    pub fn whisper_full(
        ctx: *mut whisper_context,
        params: whisper_full_params,
        samples: *const f32,
        n_samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_full_with_state(
        ctx: *mut whisper_context,
        state: *mut whisper_state,
        params: whisper_full_params,
        samples: *const f32,
        n_samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_full_parallel(
        ctx: *mut whisper_context,
        params: whisper_full_params,
        samples: *const f32,
        n_samples: ::std::os::raw::c_int,
        n_processors: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_full_n_segments(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_full_n_segments_from_state(state: *mut whisper_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_full_lang_id(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_full_lang_id_from_state(state: *mut whisper_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_full_get_segment_t0(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
    ) -> i64;
}
extern "C" {
    pub fn whisper_full_get_segment_t0_from_state(
        state: *mut whisper_state,
        i_segment: ::std::os::raw::c_int,
    ) -> i64;
}
extern "C" {
    pub fn whisper_full_get_segment_t1(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
    ) -> i64;
}
extern "C" {
    pub fn whisper_full_get_segment_t1_from_state(
        state: *mut whisper_state,
        i_segment: ::std::os::raw::c_int,
    ) -> i64;
}
extern "C" {
    pub fn whisper_full_get_segment_speaker_turn_next(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn whisper_full_get_segment_speaker_turn_next_from_state(
        state: *mut whisper_state,
        i_segment: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn whisper_full_get_segment_text(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn whisper_full_get_segment_text_from_state(
        state: *mut whisper_state,
        i_segment: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn whisper_full_n_tokens(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_full_n_tokens_from_state(
        state: *mut whisper_state,
        i_segment: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_full_get_token_text(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
        i_token: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn whisper_full_get_token_text_from_state(
        ctx: *mut whisper_context,
        state: *mut whisper_state,
        i_segment: ::std::os::raw::c_int,
        i_token: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn whisper_full_get_token_id(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
        i_token: ::std::os::raw::c_int,
    ) -> whisper_token;
}
extern "C" {
    pub fn whisper_full_get_token_id_from_state(
        state: *mut whisper_state,
        i_segment: ::std::os::raw::c_int,
        i_token: ::std::os::raw::c_int,
    ) -> whisper_token;
}
extern "C" {
    pub fn whisper_full_get_token_data(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
        i_token: ::std::os::raw::c_int,
    ) -> whisper_token_data;
}
extern "C" {
    pub fn whisper_full_get_token_data_from_state(
        state: *mut whisper_state,
        i_segment: ::std::os::raw::c_int,
        i_token: ::std::os::raw::c_int,
    ) -> whisper_token_data;
}
extern "C" {
    pub fn whisper_full_get_token_p(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
        i_token: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn whisper_full_get_token_p_from_state(
        state: *mut whisper_state,
        i_segment: ::std::os::raw::c_int,
        i_token: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn whisper_bench_memcpy(n_threads: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_bench_memcpy_str(
        n_threads: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn whisper_bench_ggml_mul_mat(n_threads: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_bench_ggml_mul_mat_str(
        n_threads: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn whisper_log_set(log_callback: ggml_log_callback, user_data: *mut ::std::os::raw::c_void);
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_buffer {
    pub _address: u8,
}
